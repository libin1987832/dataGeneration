// Generated by gencpp from file motion_estimation/configMotionEstimationGoal.msg
// DO NOT EDIT!


#ifndef MOTION_ESTIMATION_MESSAGE_CONFIGMOTIONESTIMATIONGOAL_H
#define MOTION_ESTIMATION_MESSAGE_CONFIGMOTIONESTIMATIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <shared_files/TransformNames.h>
#include <shared_files/TopicNames.h>

namespace motion_estimation
{
template <class ContainerAllocator>
struct configMotionEstimationGoal_
{
  typedef configMotionEstimationGoal_<ContainerAllocator> Type;

  configMotionEstimationGoal_()
    : QRow_one()
    , QRow_two()
    , QRow_three()
    , QRow_four()
    , tname()
    , topname()  {
    }
  configMotionEstimationGoal_(const ContainerAllocator& _alloc)
    : QRow_one(_alloc)
    , QRow_two(_alloc)
    , QRow_three(_alloc)
    , QRow_four(_alloc)
    , tname(_alloc)
    , topname(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::Float64_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float64_<ContainerAllocator> >::other >  _QRow_one_type;
  _QRow_one_type QRow_one;

   typedef std::vector< ::std_msgs::Float64_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float64_<ContainerAllocator> >::other >  _QRow_two_type;
  _QRow_two_type QRow_two;

   typedef std::vector< ::std_msgs::Float64_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float64_<ContainerAllocator> >::other >  _QRow_three_type;
  _QRow_three_type QRow_three;

   typedef std::vector< ::std_msgs::Float64_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float64_<ContainerAllocator> >::other >  _QRow_four_type;
  _QRow_four_type QRow_four;

   typedef  ::shared_files::TransformNames_<ContainerAllocator>  _tname_type;
  _tname_type tname;

   typedef  ::shared_files::TopicNames_<ContainerAllocator>  _topname_type;
  _topname_type topname;




  typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct configMotionEstimationGoal_

typedef ::motion_estimation::configMotionEstimationGoal_<std::allocator<void> > configMotionEstimationGoal;

typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationGoal > configMotionEstimationGoalPtr;
typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationGoal const> configMotionEstimationGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motion_estimation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'motion_estimation': ['/home/ryan/GitHub_WorkSpace/dataGeneration/devel/share/motion_estimation/msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "270b859cd6d37c115cfebe8b49e68ab0";
  }

  static const char* value(const ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x270b859cd6d37c11ULL;
  static const uint64_t static_value2 = 0x5cfebe8b49e68ab0ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_estimation/configMotionEstimationGoal";
  }

  static const char* value(const ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
std_msgs/Float64[] QRow_one\n\
std_msgs/Float64[] QRow_two\n\
std_msgs/Float64[] QRow_three\n\
std_msgs/Float64[] QRow_four\n\
shared_files/TransformNames tname\n\
shared_files/TopicNames topname\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64\n\
float64 data\n\
================================================================================\n\
MSG: shared_files/TransformNames\n\
std_msgs/String ID\n\
std_msgs/String world_frame\n\
std_msgs/String cm\n\
std_msgs/String left\n\
std_msgs/String right\n\
std_msgs/String left_cv\n\
std_msgs/String right_cv\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: shared_files/TopicNames\n\
std_msgs/String RelativeCloudTopic\n\
std_msgs/String MatchesTopic\n\
std_msgs/String NoisyEstimationTopic\n\
std_msgs/String OriginalTopic\n\
std_msgs/String RectifiedEstimationTopic\n\
std_msgs/String MapTopic\n\
";
  }

  static const char* value(const ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.QRow_one);
      stream.next(m.QRow_two);
      stream.next(m.QRow_three);
      stream.next(m.QRow_four);
      stream.next(m.tname);
      stream.next(m.topname);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct configMotionEstimationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_estimation::configMotionEstimationGoal_<ContainerAllocator>& v)
  {
    s << indent << "QRow_one[]" << std::endl;
    for (size_t i = 0; i < v.QRow_one.size(); ++i)
    {
      s << indent << "  QRow_one[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "    ", v.QRow_one[i]);
    }
    s << indent << "QRow_two[]" << std::endl;
    for (size_t i = 0; i < v.QRow_two.size(); ++i)
    {
      s << indent << "  QRow_two[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "    ", v.QRow_two[i]);
    }
    s << indent << "QRow_three[]" << std::endl;
    for (size_t i = 0; i < v.QRow_three.size(); ++i)
    {
      s << indent << "  QRow_three[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "    ", v.QRow_three[i]);
    }
    s << indent << "QRow_four[]" << std::endl;
    for (size_t i = 0; i < v.QRow_four.size(); ++i)
    {
      s << indent << "  QRow_four[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "    ", v.QRow_four[i]);
    }
    s << indent << "tname: ";
    s << std::endl;
    Printer< ::shared_files::TransformNames_<ContainerAllocator> >::stream(s, indent + "  ", v.tname);
    s << indent << "topname: ";
    s << std::endl;
    Printer< ::shared_files::TopicNames_<ContainerAllocator> >::stream(s, indent + "  ", v.topname);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_ESTIMATION_MESSAGE_CONFIGMOTIONESTIMATIONGOAL_H
