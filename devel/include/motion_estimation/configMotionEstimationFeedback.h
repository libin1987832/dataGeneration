// Generated by gencpp from file motion_estimation/configMotionEstimationFeedback.msg
// DO NOT EDIT!


#ifndef MOTION_ESTIMATION_MESSAGE_CONFIGMOTIONESTIMATIONFEEDBACK_H
#define MOTION_ESTIMATION_MESSAGE_CONFIGMOTIONESTIMATIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Empty.h>

namespace motion_estimation
{
template <class ContainerAllocator>
struct configMotionEstimationFeedback_
{
  typedef configMotionEstimationFeedback_<ContainerAllocator> Type;

  configMotionEstimationFeedback_()
    : fooo()  {
    }
  configMotionEstimationFeedback_(const ContainerAllocator& _alloc)
    : fooo(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Empty_<ContainerAllocator>  _fooo_type;
  _fooo_type fooo;




  typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct configMotionEstimationFeedback_

typedef ::motion_estimation::configMotionEstimationFeedback_<std::allocator<void> > configMotionEstimationFeedback;

typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationFeedback > configMotionEstimationFeedbackPtr;
typedef boost::shared_ptr< ::motion_estimation::configMotionEstimationFeedback const> configMotionEstimationFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motion_estimation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'motion_estimation': ['/home/ryan/GitHub_WorkSpace/dataGeneration/devel/share/motion_estimation/msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f978e4ab1cc58f40580cac0e385e6b29";
  }

  static const char* value(const ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf978e4ab1cc58f40ULL;
  static const uint64_t static_value2 = 0x580cac0e385e6b29ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_estimation/configMotionEstimationFeedback";
  }

  static const char* value(const ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
std_msgs/Empty fooo\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Empty\n\
";
  }

  static const char* value(const ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fooo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct configMotionEstimationFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_estimation::configMotionEstimationFeedback_<ContainerAllocator>& v)
  {
    s << indent << "fooo: ";
    s << std::endl;
    Printer< ::std_msgs::Empty_<ContainerAllocator> >::stream(s, indent + "  ", v.fooo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_ESTIMATION_MESSAGE_CONFIGMOTIONESTIMATIONFEEDBACK_H
