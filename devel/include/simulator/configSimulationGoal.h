// Generated by gencpp from file simulator/configSimulationGoal.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_CONFIGSIMULATIONGOAL_H
#define SIMULATOR_MESSAGE_CONFIGSIMULATIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>

namespace simulator
{
template <class ContainerAllocator>
struct configSimulationGoal_
{
  typedef configSimulationGoal_<ContainerAllocator> Type;

  configSimulationGoal_()
    : world_name()
    , new_world()
    , path_name()
    , new_path()
    , unique_id()
    , original_id()
    , ideal_id()
    , noisy_id()
    , new_camera()
    , visualize()
    , generate_graph()  {
    }
  configSimulationGoal_(const ContainerAllocator& _alloc)
    : world_name(_alloc)
    , new_world(_alloc)
    , path_name(_alloc)
    , new_path(_alloc)
    , unique_id(_alloc)
    , original_id(_alloc)
    , ideal_id(_alloc)
    , noisy_id(_alloc)
    , new_camera(_alloc)
    , visualize(_alloc)
    , generate_graph(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _world_name_type;
  _world_name_type world_name;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _new_world_type;
  _new_world_type new_world;

   typedef  ::std_msgs::String_<ContainerAllocator>  _path_name_type;
  _path_name_type path_name;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _new_path_type;
  _new_path_type new_path;

   typedef  ::std_msgs::String_<ContainerAllocator>  _unique_id_type;
  _unique_id_type unique_id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _original_id_type;
  _original_id_type original_id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _ideal_id_type;
  _ideal_id_type ideal_id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _noisy_id_type;
  _noisy_id_type noisy_id;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _new_camera_type;
  _new_camera_type new_camera;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _visualize_type;
  _visualize_type visualize;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _generate_graph_type;
  _generate_graph_type generate_graph;




  typedef boost::shared_ptr< ::simulator::configSimulationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::configSimulationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct configSimulationGoal_

typedef ::simulator::configSimulationGoal_<std::allocator<void> > configSimulationGoal;

typedef boost::shared_ptr< ::simulator::configSimulationGoal > configSimulationGoalPtr;
typedef boost::shared_ptr< ::simulator::configSimulationGoal const> configSimulationGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::configSimulationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::configSimulationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simulator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'simulator': ['/home/ryan/GitHub_WorkSpace/dataGeneration/devel/share/simulator/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simulator::configSimulationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::configSimulationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::configSimulationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::configSimulationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::configSimulationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::configSimulationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::configSimulationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "837740a48de6bf8ef577fd1fdc89c7f9";
  }

  static const char* value(const ::simulator::configSimulationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x837740a48de6bf8eULL;
  static const uint64_t static_value2 = 0xf577fd1fdc89c7f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::configSimulationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/configSimulationGoal";
  }

  static const char* value(const ::simulator::configSimulationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::configSimulationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
std_msgs/String world_name\n\
std_msgs/Bool new_world\n\
std_msgs/String path_name\n\
std_msgs/Bool new_path\n\
std_msgs/String unique_id\n\
std_msgs/String original_id\n\
std_msgs/String ideal_id\n\
std_msgs/String noisy_id\n\
std_msgs/Bool new_camera\n\
std_msgs/Bool visualize\n\
std_msgs/Bool generate_graph\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
";
  }

  static const char* value(const ::simulator::configSimulationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::configSimulationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.world_name);
      stream.next(m.new_world);
      stream.next(m.path_name);
      stream.next(m.new_path);
      stream.next(m.unique_id);
      stream.next(m.original_id);
      stream.next(m.ideal_id);
      stream.next(m.noisy_id);
      stream.next(m.new_camera);
      stream.next(m.visualize);
      stream.next(m.generate_graph);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct configSimulationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::configSimulationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::configSimulationGoal_<ContainerAllocator>& v)
  {
    s << indent << "world_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.world_name);
    s << indent << "new_world: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.new_world);
    s << indent << "path_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.path_name);
    s << indent << "new_path: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.new_path);
    s << indent << "unique_id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.unique_id);
    s << indent << "original_id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.original_id);
    s << indent << "ideal_id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.ideal_id);
    s << indent << "noisy_id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.noisy_id);
    s << indent << "new_camera: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.new_camera);
    s << indent << "visualize: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.visualize);
    s << indent << "generate_graph: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.generate_graph);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_CONFIGSIMULATIONGOAL_H
