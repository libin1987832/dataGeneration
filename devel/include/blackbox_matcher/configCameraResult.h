// Generated by gencpp from file blackbox_matcher/configCameraResult.msg
// DO NOT EDIT!


#ifndef BLACKBOX_MATCHER_MESSAGE_CONFIGCAMERARESULT_H
#define BLACKBOX_MATCHER_MESSAGE_CONFIGCAMERARESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Empty.h>

namespace blackbox_matcher
{
template <class ContainerAllocator>
struct configCameraResult_
{
  typedef configCameraResult_<ContainerAllocator> Type;

  configCameraResult_()
    : foo()  {
    }
  configCameraResult_(const ContainerAllocator& _alloc)
    : foo(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Empty_<ContainerAllocator>  _foo_type;
  _foo_type foo;




  typedef boost::shared_ptr< ::blackbox_matcher::configCameraResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blackbox_matcher::configCameraResult_<ContainerAllocator> const> ConstPtr;

}; // struct configCameraResult_

typedef ::blackbox_matcher::configCameraResult_<std::allocator<void> > configCameraResult;

typedef boost::shared_ptr< ::blackbox_matcher::configCameraResult > configCameraResultPtr;
typedef boost::shared_ptr< ::blackbox_matcher::configCameraResult const> configCameraResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blackbox_matcher::configCameraResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blackbox_matcher

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'blackbox_matcher': ['/home/ryan/GitHub_WorkSpace/dataGeneration/devel/share/blackbox_matcher/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blackbox_matcher::configCameraResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blackbox_matcher::configCameraResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blackbox_matcher::configCameraResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "256e907a74585c86051805b50c5f7dc8";
  }

  static const char* value(const ::blackbox_matcher::configCameraResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x256e907a74585c86ULL;
  static const uint64_t static_value2 = 0x051805b50c5f7dc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blackbox_matcher/configCameraResult";
  }

  static const char* value(const ::blackbox_matcher::configCameraResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
std_msgs/Empty foo\n\
\n\
================================================================================\n\
MSG: std_msgs/Empty\n\
";
  }

  static const char* value(const ::blackbox_matcher::configCameraResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.foo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct configCameraResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blackbox_matcher::configCameraResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blackbox_matcher::configCameraResult_<ContainerAllocator>& v)
  {
    s << indent << "foo: ";
    s << std::endl;
    Printer< ::std_msgs::Empty_<ContainerAllocator> >::stream(s, indent + "  ", v.foo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLACKBOX_MATCHER_MESSAGE_CONFIGCAMERARESULT_H
