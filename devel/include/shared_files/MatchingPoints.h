// Generated by gencpp from file shared_files/MatchingPoints.msg
// DO NOT EDIT!


#ifndef SHARED_FILES_MESSAGE_MATCHINGPOINTS_H
#define SHARED_FILES_MESSAGE_MATCHINGPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <shared_files/PixelMatch.h>
#include <shared_files/PixelMatch.h>
#include <std_msgs/Int32.h>

namespace shared_files
{
template <class ContainerAllocator>
struct MatchingPoints_
{
  typedef MatchingPoints_<ContainerAllocator> Type;

  MatchingPoints_()
    : Rectified()
    , Noise()
    , NumberID()  {
    }
  MatchingPoints_(const ContainerAllocator& _alloc)
    : Rectified(_alloc)
    , Noise(_alloc)
    , NumberID(_alloc)  {
  (void)_alloc;
    }



   typedef  ::shared_files::PixelMatch_<ContainerAllocator>  _Rectified_type;
  _Rectified_type Rectified;

   typedef  ::shared_files::PixelMatch_<ContainerAllocator>  _Noise_type;
  _Noise_type Noise;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _NumberID_type;
  _NumberID_type NumberID;




  typedef boost::shared_ptr< ::shared_files::MatchingPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_files::MatchingPoints_<ContainerAllocator> const> ConstPtr;

}; // struct MatchingPoints_

typedef ::shared_files::MatchingPoints_<std::allocator<void> > MatchingPoints;

typedef boost::shared_ptr< ::shared_files::MatchingPoints > MatchingPointsPtr;
typedef boost::shared_ptr< ::shared_files::MatchingPoints const> MatchingPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_files::MatchingPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_files::MatchingPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_files

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::MatchingPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::MatchingPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::MatchingPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::MatchingPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::MatchingPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::MatchingPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_files::MatchingPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95d22b9d9588a72cd4ecca334b14e511";
  }

  static const char* value(const ::shared_files::MatchingPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95d22b9d9588a72cULL;
  static const uint64_t static_value2 = 0xd4ecca334b14e511ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_files::MatchingPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/MatchingPoints";
  }

  static const char* value(const ::shared_files::MatchingPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_files::MatchingPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/PixelMatch Rectified\n\
shared_files/PixelMatch Noise\n\
std_msgs/Int32 NumberID\n\
\n\
================================================================================\n\
MSG: shared_files/PixelMatch\n\
std_msgs/Float32 u\n\
std_msgs/Float32 v\n\
std_msgs/Float32 Disparity\n\
\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const ::shared_files::MatchingPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_files::MatchingPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Rectified);
      stream.next(m.Noise);
      stream.next(m.NumberID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MatchingPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_files::MatchingPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_files::MatchingPoints_<ContainerAllocator>& v)
  {
    s << indent << "Rectified: ";
    s << std::endl;
    Printer< ::shared_files::PixelMatch_<ContainerAllocator> >::stream(s, indent + "  ", v.Rectified);
    s << indent << "Noise: ";
    s << std::endl;
    Printer< ::shared_files::PixelMatch_<ContainerAllocator> >::stream(s, indent + "  ", v.Noise);
    s << indent << "NumberID: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.NumberID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_FILES_MESSAGE_MATCHINGPOINTS_H
