// Generated by gencpp from file shared_files/PointSet.msg
// DO NOT EDIT!


#ifndef SHARED_FILES_MESSAGE_POINTSET_H
#define SHARED_FILES_MESSAGE_POINTSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <shared_files/PointEstimate.h>
#include <shared_files/PointEstimate.h>
#include <std_msgs/Int32.h>

namespace shared_files
{
template <class ContainerAllocator>
struct PointSet_
{
  typedef PointSet_<ContainerAllocator> Type;

  PointSet_()
    : RectifiedPoint()
    , NoisyPoint()
    , PointID()  {
    }
  PointSet_(const ContainerAllocator& _alloc)
    : RectifiedPoint(_alloc)
    , NoisyPoint(_alloc)
    , PointID(_alloc)  {
  (void)_alloc;
    }



   typedef  ::shared_files::PointEstimate_<ContainerAllocator>  _RectifiedPoint_type;
  _RectifiedPoint_type RectifiedPoint;

   typedef  ::shared_files::PointEstimate_<ContainerAllocator>  _NoisyPoint_type;
  _NoisyPoint_type NoisyPoint;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _PointID_type;
  _PointID_type PointID;




  typedef boost::shared_ptr< ::shared_files::PointSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_files::PointSet_<ContainerAllocator> const> ConstPtr;

}; // struct PointSet_

typedef ::shared_files::PointSet_<std::allocator<void> > PointSet;

typedef boost::shared_ptr< ::shared_files::PointSet > PointSetPtr;
typedef boost::shared_ptr< ::shared_files::PointSet const> PointSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_files::PointSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_files::PointSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_files

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::PointSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::PointSet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::PointSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::PointSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::PointSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::PointSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_files::PointSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa23bf05643854c46bff8fb19ae1450c";
  }

  static const char* value(const ::shared_files::PointSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa23bf05643854c4ULL;
  static const uint64_t static_value2 = 0x6bff8fb19ae1450cULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_files::PointSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/PointSet";
  }

  static const char* value(const ::shared_files::PointSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_files::PointSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/PointEstimate RectifiedPoint\n\
shared_files/PointEstimate NoisyPoint\n\
std_msgs/Int32 PointID\n\
\n\
================================================================================\n\
MSG: shared_files/PointEstimate\n\
geometry_msgs/Point32 Estimate\n\
std_msgs/Float32[] CovRowOne\n\
std_msgs/Float32[] CovRowTwo\n\
std_msgs/Float32[] CovRowThree\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const ::shared_files::PointSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_files::PointSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RectifiedPoint);
      stream.next(m.NoisyPoint);
      stream.next(m.PointID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_files::PointSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_files::PointSet_<ContainerAllocator>& v)
  {
    s << indent << "RectifiedPoint: ";
    s << std::endl;
    Printer< ::shared_files::PointEstimate_<ContainerAllocator> >::stream(s, indent + "  ", v.RectifiedPoint);
    s << indent << "NoisyPoint: ";
    s << std::endl;
    Printer< ::shared_files::PointEstimate_<ContainerAllocator> >::stream(s, indent + "  ", v.NoisyPoint);
    s << indent << "PointID: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.PointID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_FILES_MESSAGE_POINTSET_H
