// Generated by gencpp from file shared_files/SettingsTransform.msg
// DO NOT EDIT!


#ifndef SHARED_FILES_MESSAGE_SETTINGSTRANSFORM_H
#define SHARED_FILES_MESSAGE_SETTINGSTRANSFORM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/TransformStamped.h>

namespace shared_files
{
template <class ContainerAllocator>
struct SettingsTransform_
{
  typedef SettingsTransform_<ContainerAllocator> Type;

  SettingsTransform_()
    : cm_l()
    , l_cv()
    , cm_r()
    , r_cv()
    , w_cm()  {
    }
  SettingsTransform_(const ContainerAllocator& _alloc)
    : cm_l(_alloc)
    , l_cv(_alloc)
    , cm_r(_alloc)
    , r_cv(_alloc)
    , w_cm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _cm_l_type;
  _cm_l_type cm_l;

   typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _l_cv_type;
  _l_cv_type l_cv;

   typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _cm_r_type;
  _cm_r_type cm_r;

   typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _r_cv_type;
  _r_cv_type r_cv;

   typedef  ::geometry_msgs::TransformStamped_<ContainerAllocator>  _w_cm_type;
  _w_cm_type w_cm;




  typedef boost::shared_ptr< ::shared_files::SettingsTransform_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_files::SettingsTransform_<ContainerAllocator> const> ConstPtr;

}; // struct SettingsTransform_

typedef ::shared_files::SettingsTransform_<std::allocator<void> > SettingsTransform;

typedef boost::shared_ptr< ::shared_files::SettingsTransform > SettingsTransformPtr;
typedef boost::shared_ptr< ::shared_files::SettingsTransform const> SettingsTransformConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_files::SettingsTransform_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_files::SettingsTransform_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_files

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::SettingsTransform_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::SettingsTransform_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::SettingsTransform_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::SettingsTransform_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::SettingsTransform_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::SettingsTransform_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_files::SettingsTransform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b0a011dc5474bcba2d8b6bdc32127c5";
  }

  static const char* value(const ::shared_files::SettingsTransform_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b0a011dc5474bcbULL;
  static const uint64_t static_value2 = 0xa2d8b6bdc32127c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_files::SettingsTransform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/SettingsTransform";
  }

  static const char* value(const ::shared_files::SettingsTransform_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_files::SettingsTransform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/TransformStamped cm_l\n\
geometry_msgs/TransformStamped l_cv\n\
geometry_msgs/TransformStamped cm_r\n\
geometry_msgs/TransformStamped r_cv\n\
geometry_msgs/TransformStamped w_cm\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TransformStamped\n\
# This expresses a transform from coordinate frame header.frame_id\n\
# to the coordinate frame child_frame_id\n\
#\n\
# This message is mostly used by the \n\
# <a href=\"http://www.ros.org/wiki/tf\">tf</a> package. \n\
# See its documentation for more information.\n\
\n\
Header header\n\
string child_frame_id # the frame id of the child frame\n\
Transform transform\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Transform\n\
# This represents the transform between two coordinate frames in free space.\n\
\n\
Vector3 translation\n\
Quaternion rotation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::shared_files::SettingsTransform_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_files::SettingsTransform_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cm_l);
      stream.next(m.l_cv);
      stream.next(m.cm_r);
      stream.next(m.r_cv);
      stream.next(m.w_cm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SettingsTransform_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_files::SettingsTransform_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_files::SettingsTransform_<ContainerAllocator>& v)
  {
    s << indent << "cm_l: ";
    s << std::endl;
    Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.cm_l);
    s << indent << "l_cv: ";
    s << std::endl;
    Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.l_cv);
    s << indent << "cm_r: ";
    s << std::endl;
    Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.cm_r);
    s << indent << "r_cv: ";
    s << std::endl;
    Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.r_cv);
    s << indent << "w_cm: ";
    s << std::endl;
    Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.w_cm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_FILES_MESSAGE_SETTINGSTRANSFORM_H
