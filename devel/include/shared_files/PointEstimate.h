// Generated by gencpp from file shared_files/PointEstimate.msg
// DO NOT EDIT!


#ifndef SHARED_FILES_MESSAGE_POINTESTIMATE_H
#define SHARED_FILES_MESSAGE_POINTESTIMATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace shared_files
{
template <class ContainerAllocator>
struct PointEstimate_
{
  typedef PointEstimate_<ContainerAllocator> Type;

  PointEstimate_()
    : Estimate()
    , CovRowOne()
    , CovRowTwo()
    , CovRowThree()  {
    }
  PointEstimate_(const ContainerAllocator& _alloc)
    : Estimate(_alloc)
    , CovRowOne(_alloc)
    , CovRowTwo(_alloc)
    , CovRowThree(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _Estimate_type;
  _Estimate_type Estimate;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _CovRowOne_type;
  _CovRowOne_type CovRowOne;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _CovRowTwo_type;
  _CovRowTwo_type CovRowTwo;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _CovRowThree_type;
  _CovRowThree_type CovRowThree;




  typedef boost::shared_ptr< ::shared_files::PointEstimate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_files::PointEstimate_<ContainerAllocator> const> ConstPtr;

}; // struct PointEstimate_

typedef ::shared_files::PointEstimate_<std::allocator<void> > PointEstimate;

typedef boost::shared_ptr< ::shared_files::PointEstimate > PointEstimatePtr;
typedef boost::shared_ptr< ::shared_files::PointEstimate const> PointEstimateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_files::PointEstimate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_files::PointEstimate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_files

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::PointEstimate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::PointEstimate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::PointEstimate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::PointEstimate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::PointEstimate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::PointEstimate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_files::PointEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aba53fa7b710b8c049b6e89d615c2cb0";
  }

  static const char* value(const ::shared_files::PointEstimate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaba53fa7b710b8c0ULL;
  static const uint64_t static_value2 = 0x49b6e89d615c2cb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_files::PointEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/PointEstimate";
  }

  static const char* value(const ::shared_files::PointEstimate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_files::PointEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point32 Estimate\n\
std_msgs/Float32[] CovRowOne\n\
std_msgs/Float32[] CovRowTwo\n\
std_msgs/Float32[] CovRowThree\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: std_msgs/Float32\n\
float32 data\n\
";
  }

  static const char* value(const ::shared_files::PointEstimate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_files::PointEstimate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Estimate);
      stream.next(m.CovRowOne);
      stream.next(m.CovRowTwo);
      stream.next(m.CovRowThree);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointEstimate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_files::PointEstimate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_files::PointEstimate_<ContainerAllocator>& v)
  {
    s << indent << "Estimate: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.Estimate);
    s << indent << "CovRowOne[]" << std::endl;
    for (size_t i = 0; i < v.CovRowOne.size(); ++i)
    {
      s << indent << "  CovRowOne[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.CovRowOne[i]);
    }
    s << indent << "CovRowTwo[]" << std::endl;
    for (size_t i = 0; i < v.CovRowTwo.size(); ++i)
    {
      s << indent << "  CovRowTwo[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.CovRowTwo[i]);
    }
    s << indent << "CovRowThree[]" << std::endl;
    for (size_t i = 0; i < v.CovRowThree.size(); ++i)
    {
      s << indent << "  CovRowThree[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.CovRowThree[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_FILES_MESSAGE_POINTESTIMATE_H
