// Generated by gencpp from file shared_files/TopicNames.msg
// DO NOT EDIT!


#ifndef SHARED_FILES_MESSAGE_TOPICNAMES_H
#define SHARED_FILES_MESSAGE_TOPICNAMES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace shared_files
{
template <class ContainerAllocator>
struct TopicNames_
{
  typedef TopicNames_<ContainerAllocator> Type;

  TopicNames_()
    : RelativeCloudTopic()
    , MatchesTopic()
    , NoisyEstimationTopic()
    , OriginalTopic()
    , RectifiedEstimationTopic()
    , MapTopic()  {
    }
  TopicNames_(const ContainerAllocator& _alloc)
    : RelativeCloudTopic(_alloc)
    , MatchesTopic(_alloc)
    , NoisyEstimationTopic(_alloc)
    , OriginalTopic(_alloc)
    , RectifiedEstimationTopic(_alloc)
    , MapTopic(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _RelativeCloudTopic_type;
  _RelativeCloudTopic_type RelativeCloudTopic;

   typedef  ::std_msgs::String_<ContainerAllocator>  _MatchesTopic_type;
  _MatchesTopic_type MatchesTopic;

   typedef  ::std_msgs::String_<ContainerAllocator>  _NoisyEstimationTopic_type;
  _NoisyEstimationTopic_type NoisyEstimationTopic;

   typedef  ::std_msgs::String_<ContainerAllocator>  _OriginalTopic_type;
  _OriginalTopic_type OriginalTopic;

   typedef  ::std_msgs::String_<ContainerAllocator>  _RectifiedEstimationTopic_type;
  _RectifiedEstimationTopic_type RectifiedEstimationTopic;

   typedef  ::std_msgs::String_<ContainerAllocator>  _MapTopic_type;
  _MapTopic_type MapTopic;




  typedef boost::shared_ptr< ::shared_files::TopicNames_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_files::TopicNames_<ContainerAllocator> const> ConstPtr;

}; // struct TopicNames_

typedef ::shared_files::TopicNames_<std::allocator<void> > TopicNames;

typedef boost::shared_ptr< ::shared_files::TopicNames > TopicNamesPtr;
typedef boost::shared_ptr< ::shared_files::TopicNames const> TopicNamesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_files::TopicNames_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_files::TopicNames_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_files

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'shared_files': ['/home/ryan/GitHub_WorkSpace/dataGeneration/src/shared_files/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::TopicNames_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_files::TopicNames_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::TopicNames_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_files::TopicNames_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::TopicNames_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_files::TopicNames_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_files::TopicNames_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e072890b41f082f2863f4f3dd1dee3f4";
  }

  static const char* value(const ::shared_files::TopicNames_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe072890b41f082f2ULL;
  static const uint64_t static_value2 = 0x863f4f3dd1dee3f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_files::TopicNames_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_files/TopicNames";
  }

  static const char* value(const ::shared_files::TopicNames_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_files::TopicNames_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String RelativeCloudTopic\n\
std_msgs/String MatchesTopic\n\
std_msgs/String NoisyEstimationTopic\n\
std_msgs/String OriginalTopic\n\
std_msgs/String RectifiedEstimationTopic\n\
std_msgs/String MapTopic\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
";
  }

  static const char* value(const ::shared_files::TopicNames_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_files::TopicNames_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RelativeCloudTopic);
      stream.next(m.MatchesTopic);
      stream.next(m.NoisyEstimationTopic);
      stream.next(m.OriginalTopic);
      stream.next(m.RectifiedEstimationTopic);
      stream.next(m.MapTopic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TopicNames_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_files::TopicNames_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_files::TopicNames_<ContainerAllocator>& v)
  {
    s << indent << "RelativeCloudTopic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.RelativeCloudTopic);
    s << indent << "MatchesTopic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.MatchesTopic);
    s << indent << "NoisyEstimationTopic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.NoisyEstimationTopic);
    s << indent << "OriginalTopic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.OriginalTopic);
    s << indent << "RectifiedEstimationTopic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.RectifiedEstimationTopic);
    s << indent << "MapTopic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.MapTopic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_FILES_MESSAGE_TOPICNAMES_H
