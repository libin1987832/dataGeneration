# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from blackbox_matcher/configCameraAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import shared_files.msg
import actionlib_msgs.msg
import blackbox_matcher.msg
import geometry_msgs.msg
import genpy
import std_msgs.msg

class configCameraAction(genpy.Message):
  _md5sum = "a28b88b82f7100e35e5f1fcede601748"
  _type = "blackbox_matcher/configCameraAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

configCameraActionGoal action_goal
configCameraActionResult action_result
configCameraActionFeedback action_feedback

================================================================================
MSG: blackbox_matcher/configCameraActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
configCameraGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: blackbox_matcher/configCameraGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
shared_files/TransformNames settings_transform
shared_files/TopicNames settings_topic
geometry_msgs/Transform base
shared_files/SettingsTransform n_t
shared_files/SettingsTransform r_t

================================================================================
MSG: shared_files/TransformNames
std_msgs/String ID
std_msgs/String world_frame
std_msgs/String cm
std_msgs/String left
std_msgs/String right
std_msgs/String left_cv
std_msgs/String right_cv

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: shared_files/TopicNames
std_msgs/String RelativeCloudTopic
std_msgs/String MatchesTopic
std_msgs/String NoisyEstimationTopic
std_msgs/String OriginalTopic
std_msgs/String RectifiedEstimationTopic
std_msgs/String MapTopic

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: shared_files/SettingsTransform
geometry_msgs/TransformStamped cm_l
geometry_msgs/TransformStamped l_cv
geometry_msgs/TransformStamped cm_r
geometry_msgs/TransformStamped r_cv
geometry_msgs/TransformStamped w_cm

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://www.ros.org/wiki/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: blackbox_matcher/configCameraActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
configCameraResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: blackbox_matcher/configCameraResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
std_msgs/Empty foo

================================================================================
MSG: std_msgs/Empty

================================================================================
MSG: blackbox_matcher/configCameraActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
configCameraFeedback feedback

================================================================================
MSG: blackbox_matcher/configCameraFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
std_msgs/Empty fooo

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['blackbox_matcher/configCameraActionGoal','blackbox_matcher/configCameraActionResult','blackbox_matcher/configCameraActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(configCameraAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = blackbox_matcher.msg.configCameraActionGoal()
      if self.action_result is None:
        self.action_result = blackbox_matcher.msg.configCameraActionResult()
      if self.action_feedback is None:
        self.action_feedback = blackbox_matcher.msg.configCameraActionFeedback()
    else:
      self.action_goal = blackbox_matcher.msg.configCameraActionGoal()
      self.action_result = blackbox_matcher.msg.configCameraActionResult()
      self.action_feedback = blackbox_matcher.msg.configCameraActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.ID.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.world_frame.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.left.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.right.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.left_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.right_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.RelativeCloudTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.MatchesTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.NoisyEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.OriginalTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.RectifiedEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.MapTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.base.translation.x, _x.action_goal.goal.base.translation.y, _x.action_goal.goal.base.translation.z, _x.action_goal.goal.base.rotation.x, _x.action_goal.goal.base.rotation.y, _x.action_goal.goal.base.rotation.z, _x.action_goal.goal.base.rotation.w, _x.action_goal.goal.n_t.cm_l.header.seq, _x.action_goal.goal.n_t.cm_l.header.stamp.secs, _x.action_goal.goal.n_t.cm_l.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.cm_l.transform.translation.x, _x.action_goal.goal.n_t.cm_l.transform.translation.y, _x.action_goal.goal.n_t.cm_l.transform.translation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.x, _x.action_goal.goal.n_t.cm_l.transform.rotation.y, _x.action_goal.goal.n_t.cm_l.transform.rotation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.w, _x.action_goal.goal.n_t.l_cv.header.seq, _x.action_goal.goal.n_t.l_cv.header.stamp.secs, _x.action_goal.goal.n_t.l_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.l_cv.transform.translation.x, _x.action_goal.goal.n_t.l_cv.transform.translation.y, _x.action_goal.goal.n_t.l_cv.transform.translation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.x, _x.action_goal.goal.n_t.l_cv.transform.rotation.y, _x.action_goal.goal.n_t.l_cv.transform.rotation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.w, _x.action_goal.goal.n_t.cm_r.header.seq, _x.action_goal.goal.n_t.cm_r.header.stamp.secs, _x.action_goal.goal.n_t.cm_r.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.cm_r.transform.translation.x, _x.action_goal.goal.n_t.cm_r.transform.translation.y, _x.action_goal.goal.n_t.cm_r.transform.translation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.x, _x.action_goal.goal.n_t.cm_r.transform.rotation.y, _x.action_goal.goal.n_t.cm_r.transform.rotation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.w, _x.action_goal.goal.n_t.r_cv.header.seq, _x.action_goal.goal.n_t.r_cv.header.stamp.secs, _x.action_goal.goal.n_t.r_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.r_cv.transform.translation.x, _x.action_goal.goal.n_t.r_cv.transform.translation.y, _x.action_goal.goal.n_t.r_cv.transform.translation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.x, _x.action_goal.goal.n_t.r_cv.transform.rotation.y, _x.action_goal.goal.n_t.r_cv.transform.rotation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.w, _x.action_goal.goal.n_t.w_cm.header.seq, _x.action_goal.goal.n_t.w_cm.header.stamp.secs, _x.action_goal.goal.n_t.w_cm.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.w_cm.transform.translation.x, _x.action_goal.goal.n_t.w_cm.transform.translation.y, _x.action_goal.goal.n_t.w_cm.transform.translation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.x, _x.action_goal.goal.n_t.w_cm.transform.rotation.y, _x.action_goal.goal.n_t.w_cm.transform.rotation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.w, _x.action_goal.goal.r_t.cm_l.header.seq, _x.action_goal.goal.r_t.cm_l.header.stamp.secs, _x.action_goal.goal.r_t.cm_l.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.cm_l.transform.translation.x, _x.action_goal.goal.r_t.cm_l.transform.translation.y, _x.action_goal.goal.r_t.cm_l.transform.translation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.x, _x.action_goal.goal.r_t.cm_l.transform.rotation.y, _x.action_goal.goal.r_t.cm_l.transform.rotation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.w, _x.action_goal.goal.r_t.l_cv.header.seq, _x.action_goal.goal.r_t.l_cv.header.stamp.secs, _x.action_goal.goal.r_t.l_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.l_cv.transform.translation.x, _x.action_goal.goal.r_t.l_cv.transform.translation.y, _x.action_goal.goal.r_t.l_cv.transform.translation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.x, _x.action_goal.goal.r_t.l_cv.transform.rotation.y, _x.action_goal.goal.r_t.l_cv.transform.rotation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.w, _x.action_goal.goal.r_t.cm_r.header.seq, _x.action_goal.goal.r_t.cm_r.header.stamp.secs, _x.action_goal.goal.r_t.cm_r.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.cm_r.transform.translation.x, _x.action_goal.goal.r_t.cm_r.transform.translation.y, _x.action_goal.goal.r_t.cm_r.transform.translation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.x, _x.action_goal.goal.r_t.cm_r.transform.rotation.y, _x.action_goal.goal.r_t.cm_r.transform.rotation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.w, _x.action_goal.goal.r_t.r_cv.header.seq, _x.action_goal.goal.r_t.r_cv.header.stamp.secs, _x.action_goal.goal.r_t.r_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.r_cv.transform.translation.x, _x.action_goal.goal.r_t.r_cv.transform.translation.y, _x.action_goal.goal.r_t.r_cv.transform.translation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.x, _x.action_goal.goal.r_t.r_cv.transform.rotation.y, _x.action_goal.goal.r_t.r_cv.transform.rotation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.w, _x.action_goal.goal.r_t.w_cm.header.seq, _x.action_goal.goal.r_t.w_cm.header.stamp.secs, _x.action_goal.goal.r_t.w_cm.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.w_cm.transform.translation.x, _x.action_goal.goal.r_t.w_cm.transform.translation.y, _x.action_goal.goal.r_t.w_cm.transform.translation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.x, _x.action_goal.goal.r_t.w_cm.transform.rotation.y, _x.action_goal.goal.r_t.w_cm.transform.rotation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = blackbox_matcher.msg.configCameraActionGoal()
      if self.action_result is None:
        self.action_result = blackbox_matcher.msg.configCameraActionResult()
      if self.action_feedback is None:
        self.action_feedback = blackbox_matcher.msg.configCameraActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.ID.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.ID.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.world_frame.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.world_frame.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.cm.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.left.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.left.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.right.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.left_cv.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.left_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.right_cv.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.right_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.RelativeCloudTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.RelativeCloudTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.MatchesTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.MatchesTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.NoisyEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.NoisyEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.OriginalTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.OriginalTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.RectifiedEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.RectifiedEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.MapTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.MapTopic.data = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.base.translation.x, _x.action_goal.goal.base.translation.y, _x.action_goal.goal.base.translation.z, _x.action_goal.goal.base.rotation.x, _x.action_goal.goal.base.rotation.y, _x.action_goal.goal.base.rotation.z, _x.action_goal.goal.base.rotation.w, _x.action_goal.goal.n_t.cm_l.header.seq, _x.action_goal.goal.n_t.cm_l.header.stamp.secs, _x.action_goal.goal.n_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.cm_l.transform.translation.x, _x.action_goal.goal.n_t.cm_l.transform.translation.y, _x.action_goal.goal.n_t.cm_l.transform.translation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.x, _x.action_goal.goal.n_t.cm_l.transform.rotation.y, _x.action_goal.goal.n_t.cm_l.transform.rotation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.w, _x.action_goal.goal.n_t.l_cv.header.seq, _x.action_goal.goal.n_t.l_cv.header.stamp.secs, _x.action_goal.goal.n_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.l_cv.transform.translation.x, _x.action_goal.goal.n_t.l_cv.transform.translation.y, _x.action_goal.goal.n_t.l_cv.transform.translation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.x, _x.action_goal.goal.n_t.l_cv.transform.rotation.y, _x.action_goal.goal.n_t.l_cv.transform.rotation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.w, _x.action_goal.goal.n_t.cm_r.header.seq, _x.action_goal.goal.n_t.cm_r.header.stamp.secs, _x.action_goal.goal.n_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.cm_r.transform.translation.x, _x.action_goal.goal.n_t.cm_r.transform.translation.y, _x.action_goal.goal.n_t.cm_r.transform.translation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.x, _x.action_goal.goal.n_t.cm_r.transform.rotation.y, _x.action_goal.goal.n_t.cm_r.transform.rotation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.w, _x.action_goal.goal.n_t.r_cv.header.seq, _x.action_goal.goal.n_t.r_cv.header.stamp.secs, _x.action_goal.goal.n_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.r_cv.transform.translation.x, _x.action_goal.goal.n_t.r_cv.transform.translation.y, _x.action_goal.goal.n_t.r_cv.transform.translation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.x, _x.action_goal.goal.n_t.r_cv.transform.rotation.y, _x.action_goal.goal.n_t.r_cv.transform.rotation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.w, _x.action_goal.goal.n_t.w_cm.header.seq, _x.action_goal.goal.n_t.w_cm.header.stamp.secs, _x.action_goal.goal.n_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.w_cm.transform.translation.x, _x.action_goal.goal.n_t.w_cm.transform.translation.y, _x.action_goal.goal.n_t.w_cm.transform.translation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.x, _x.action_goal.goal.n_t.w_cm.transform.rotation.y, _x.action_goal.goal.n_t.w_cm.transform.rotation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.w, _x.action_goal.goal.r_t.cm_l.header.seq, _x.action_goal.goal.r_t.cm_l.header.stamp.secs, _x.action_goal.goal.r_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.cm_l.transform.translation.x, _x.action_goal.goal.r_t.cm_l.transform.translation.y, _x.action_goal.goal.r_t.cm_l.transform.translation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.x, _x.action_goal.goal.r_t.cm_l.transform.rotation.y, _x.action_goal.goal.r_t.cm_l.transform.rotation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.w, _x.action_goal.goal.r_t.l_cv.header.seq, _x.action_goal.goal.r_t.l_cv.header.stamp.secs, _x.action_goal.goal.r_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.l_cv.transform.translation.x, _x.action_goal.goal.r_t.l_cv.transform.translation.y, _x.action_goal.goal.r_t.l_cv.transform.translation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.x, _x.action_goal.goal.r_t.l_cv.transform.rotation.y, _x.action_goal.goal.r_t.l_cv.transform.rotation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.w, _x.action_goal.goal.r_t.cm_r.header.seq, _x.action_goal.goal.r_t.cm_r.header.stamp.secs, _x.action_goal.goal.r_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.cm_r.transform.translation.x, _x.action_goal.goal.r_t.cm_r.transform.translation.y, _x.action_goal.goal.r_t.cm_r.transform.translation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.x, _x.action_goal.goal.r_t.cm_r.transform.rotation.y, _x.action_goal.goal.r_t.cm_r.transform.rotation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.w, _x.action_goal.goal.r_t.r_cv.header.seq, _x.action_goal.goal.r_t.r_cv.header.stamp.secs, _x.action_goal.goal.r_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.r_cv.transform.translation.x, _x.action_goal.goal.r_t.r_cv.transform.translation.y, _x.action_goal.goal.r_t.r_cv.transform.translation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.x, _x.action_goal.goal.r_t.r_cv.transform.rotation.y, _x.action_goal.goal.r_t.r_cv.transform.rotation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.w, _x.action_goal.goal.r_t.w_cm.header.seq, _x.action_goal.goal.r_t.w_cm.header.stamp.secs, _x.action_goal.goal.r_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.w_cm.transform.translation.x, _x.action_goal.goal.r_t.w_cm.transform.translation.y, _x.action_goal.goal.r_t.w_cm.transform.translation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.x, _x.action_goal.goal.r_t.w_cm.transform.rotation.y, _x.action_goal.goal.r_t.w_cm.transform.rotation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.ID.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.world_frame.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.left.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.right.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.left_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_transform.right_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.RelativeCloudTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.MatchesTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.NoisyEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.OriginalTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.RectifiedEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.settings_topic.MapTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.base.translation.x, _x.action_goal.goal.base.translation.y, _x.action_goal.goal.base.translation.z, _x.action_goal.goal.base.rotation.x, _x.action_goal.goal.base.rotation.y, _x.action_goal.goal.base.rotation.z, _x.action_goal.goal.base.rotation.w, _x.action_goal.goal.n_t.cm_l.header.seq, _x.action_goal.goal.n_t.cm_l.header.stamp.secs, _x.action_goal.goal.n_t.cm_l.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.cm_l.transform.translation.x, _x.action_goal.goal.n_t.cm_l.transform.translation.y, _x.action_goal.goal.n_t.cm_l.transform.translation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.x, _x.action_goal.goal.n_t.cm_l.transform.rotation.y, _x.action_goal.goal.n_t.cm_l.transform.rotation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.w, _x.action_goal.goal.n_t.l_cv.header.seq, _x.action_goal.goal.n_t.l_cv.header.stamp.secs, _x.action_goal.goal.n_t.l_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.l_cv.transform.translation.x, _x.action_goal.goal.n_t.l_cv.transform.translation.y, _x.action_goal.goal.n_t.l_cv.transform.translation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.x, _x.action_goal.goal.n_t.l_cv.transform.rotation.y, _x.action_goal.goal.n_t.l_cv.transform.rotation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.w, _x.action_goal.goal.n_t.cm_r.header.seq, _x.action_goal.goal.n_t.cm_r.header.stamp.secs, _x.action_goal.goal.n_t.cm_r.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.cm_r.transform.translation.x, _x.action_goal.goal.n_t.cm_r.transform.translation.y, _x.action_goal.goal.n_t.cm_r.transform.translation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.x, _x.action_goal.goal.n_t.cm_r.transform.rotation.y, _x.action_goal.goal.n_t.cm_r.transform.rotation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.w, _x.action_goal.goal.n_t.r_cv.header.seq, _x.action_goal.goal.n_t.r_cv.header.stamp.secs, _x.action_goal.goal.n_t.r_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.r_cv.transform.translation.x, _x.action_goal.goal.n_t.r_cv.transform.translation.y, _x.action_goal.goal.n_t.r_cv.transform.translation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.x, _x.action_goal.goal.n_t.r_cv.transform.rotation.y, _x.action_goal.goal.n_t.r_cv.transform.rotation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.w, _x.action_goal.goal.n_t.w_cm.header.seq, _x.action_goal.goal.n_t.w_cm.header.stamp.secs, _x.action_goal.goal.n_t.w_cm.header.stamp.nsecs))
      _x = self.action_goal.goal.n_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.n_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.n_t.w_cm.transform.translation.x, _x.action_goal.goal.n_t.w_cm.transform.translation.y, _x.action_goal.goal.n_t.w_cm.transform.translation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.x, _x.action_goal.goal.n_t.w_cm.transform.rotation.y, _x.action_goal.goal.n_t.w_cm.transform.rotation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.w, _x.action_goal.goal.r_t.cm_l.header.seq, _x.action_goal.goal.r_t.cm_l.header.stamp.secs, _x.action_goal.goal.r_t.cm_l.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.cm_l.transform.translation.x, _x.action_goal.goal.r_t.cm_l.transform.translation.y, _x.action_goal.goal.r_t.cm_l.transform.translation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.x, _x.action_goal.goal.r_t.cm_l.transform.rotation.y, _x.action_goal.goal.r_t.cm_l.transform.rotation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.w, _x.action_goal.goal.r_t.l_cv.header.seq, _x.action_goal.goal.r_t.l_cv.header.stamp.secs, _x.action_goal.goal.r_t.l_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.l_cv.transform.translation.x, _x.action_goal.goal.r_t.l_cv.transform.translation.y, _x.action_goal.goal.r_t.l_cv.transform.translation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.x, _x.action_goal.goal.r_t.l_cv.transform.rotation.y, _x.action_goal.goal.r_t.l_cv.transform.rotation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.w, _x.action_goal.goal.r_t.cm_r.header.seq, _x.action_goal.goal.r_t.cm_r.header.stamp.secs, _x.action_goal.goal.r_t.cm_r.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.cm_r.transform.translation.x, _x.action_goal.goal.r_t.cm_r.transform.translation.y, _x.action_goal.goal.r_t.cm_r.transform.translation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.x, _x.action_goal.goal.r_t.cm_r.transform.rotation.y, _x.action_goal.goal.r_t.cm_r.transform.rotation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.w, _x.action_goal.goal.r_t.r_cv.header.seq, _x.action_goal.goal.r_t.r_cv.header.stamp.secs, _x.action_goal.goal.r_t.r_cv.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.r_cv.transform.translation.x, _x.action_goal.goal.r_t.r_cv.transform.translation.y, _x.action_goal.goal.r_t.r_cv.transform.translation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.x, _x.action_goal.goal.r_t.r_cv.transform.rotation.y, _x.action_goal.goal.r_t.r_cv.transform.rotation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.w, _x.action_goal.goal.r_t.w_cm.header.seq, _x.action_goal.goal.r_t.w_cm.header.stamp.secs, _x.action_goal.goal.r_t.w_cm.header.stamp.nsecs))
      _x = self.action_goal.goal.r_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_goal.goal.r_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.action_goal.goal.r_t.w_cm.transform.translation.x, _x.action_goal.goal.r_t.w_cm.transform.translation.y, _x.action_goal.goal.r_t.w_cm.transform.translation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.x, _x.action_goal.goal.r_t.w_cm.transform.rotation.y, _x.action_goal.goal.r_t.w_cm.transform.rotation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = blackbox_matcher.msg.configCameraActionGoal()
      if self.action_result is None:
        self.action_result = blackbox_matcher.msg.configCameraActionResult()
      if self.action_feedback is None:
        self.action_feedback = blackbox_matcher.msg.configCameraActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.ID.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.ID.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.world_frame.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.world_frame.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.cm.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.left.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.left.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.right.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.left_cv.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.left_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_transform.right_cv.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_transform.right_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.RelativeCloudTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.RelativeCloudTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.MatchesTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.MatchesTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.NoisyEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.NoisyEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.OriginalTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.OriginalTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.RectifiedEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.RectifiedEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.settings_topic.MapTopic.data = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.settings_topic.MapTopic.data = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.base.translation.x, _x.action_goal.goal.base.translation.y, _x.action_goal.goal.base.translation.z, _x.action_goal.goal.base.rotation.x, _x.action_goal.goal.base.rotation.y, _x.action_goal.goal.base.rotation.z, _x.action_goal.goal.base.rotation.w, _x.action_goal.goal.n_t.cm_l.header.seq, _x.action_goal.goal.n_t.cm_l.header.stamp.secs, _x.action_goal.goal.n_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.cm_l.transform.translation.x, _x.action_goal.goal.n_t.cm_l.transform.translation.y, _x.action_goal.goal.n_t.cm_l.transform.translation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.x, _x.action_goal.goal.n_t.cm_l.transform.rotation.y, _x.action_goal.goal.n_t.cm_l.transform.rotation.z, _x.action_goal.goal.n_t.cm_l.transform.rotation.w, _x.action_goal.goal.n_t.l_cv.header.seq, _x.action_goal.goal.n_t.l_cv.header.stamp.secs, _x.action_goal.goal.n_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.l_cv.transform.translation.x, _x.action_goal.goal.n_t.l_cv.transform.translation.y, _x.action_goal.goal.n_t.l_cv.transform.translation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.x, _x.action_goal.goal.n_t.l_cv.transform.rotation.y, _x.action_goal.goal.n_t.l_cv.transform.rotation.z, _x.action_goal.goal.n_t.l_cv.transform.rotation.w, _x.action_goal.goal.n_t.cm_r.header.seq, _x.action_goal.goal.n_t.cm_r.header.stamp.secs, _x.action_goal.goal.n_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.cm_r.transform.translation.x, _x.action_goal.goal.n_t.cm_r.transform.translation.y, _x.action_goal.goal.n_t.cm_r.transform.translation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.x, _x.action_goal.goal.n_t.cm_r.transform.rotation.y, _x.action_goal.goal.n_t.cm_r.transform.rotation.z, _x.action_goal.goal.n_t.cm_r.transform.rotation.w, _x.action_goal.goal.n_t.r_cv.header.seq, _x.action_goal.goal.n_t.r_cv.header.stamp.secs, _x.action_goal.goal.n_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.r_cv.transform.translation.x, _x.action_goal.goal.n_t.r_cv.transform.translation.y, _x.action_goal.goal.n_t.r_cv.transform.translation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.x, _x.action_goal.goal.n_t.r_cv.transform.rotation.y, _x.action_goal.goal.n_t.r_cv.transform.rotation.z, _x.action_goal.goal.n_t.r_cv.transform.rotation.w, _x.action_goal.goal.n_t.w_cm.header.seq, _x.action_goal.goal.n_t.w_cm.header.stamp.secs, _x.action_goal.goal.n_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.n_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.n_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.n_t.w_cm.transform.translation.x, _x.action_goal.goal.n_t.w_cm.transform.translation.y, _x.action_goal.goal.n_t.w_cm.transform.translation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.x, _x.action_goal.goal.n_t.w_cm.transform.rotation.y, _x.action_goal.goal.n_t.w_cm.transform.rotation.z, _x.action_goal.goal.n_t.w_cm.transform.rotation.w, _x.action_goal.goal.r_t.cm_l.header.seq, _x.action_goal.goal.r_t.cm_l.header.stamp.secs, _x.action_goal.goal.r_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.cm_l.transform.translation.x, _x.action_goal.goal.r_t.cm_l.transform.translation.y, _x.action_goal.goal.r_t.cm_l.transform.translation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.x, _x.action_goal.goal.r_t.cm_l.transform.rotation.y, _x.action_goal.goal.r_t.cm_l.transform.rotation.z, _x.action_goal.goal.r_t.cm_l.transform.rotation.w, _x.action_goal.goal.r_t.l_cv.header.seq, _x.action_goal.goal.r_t.l_cv.header.stamp.secs, _x.action_goal.goal.r_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.l_cv.transform.translation.x, _x.action_goal.goal.r_t.l_cv.transform.translation.y, _x.action_goal.goal.r_t.l_cv.transform.translation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.x, _x.action_goal.goal.r_t.l_cv.transform.rotation.y, _x.action_goal.goal.r_t.l_cv.transform.rotation.z, _x.action_goal.goal.r_t.l_cv.transform.rotation.w, _x.action_goal.goal.r_t.cm_r.header.seq, _x.action_goal.goal.r_t.cm_r.header.stamp.secs, _x.action_goal.goal.r_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.cm_r.transform.translation.x, _x.action_goal.goal.r_t.cm_r.transform.translation.y, _x.action_goal.goal.r_t.cm_r.transform.translation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.x, _x.action_goal.goal.r_t.cm_r.transform.rotation.y, _x.action_goal.goal.r_t.cm_r.transform.rotation.z, _x.action_goal.goal.r_t.cm_r.transform.rotation.w, _x.action_goal.goal.r_t.r_cv.header.seq, _x.action_goal.goal.r_t.r_cv.header.stamp.secs, _x.action_goal.goal.r_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.r_cv.transform.translation.x, _x.action_goal.goal.r_t.r_cv.transform.translation.y, _x.action_goal.goal.r_t.r_cv.transform.translation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.x, _x.action_goal.goal.r_t.r_cv.transform.rotation.y, _x.action_goal.goal.r_t.r_cv.transform.rotation.z, _x.action_goal.goal.r_t.r_cv.transform.rotation.w, _x.action_goal.goal.r_t.w_cm.header.seq, _x.action_goal.goal.r_t.w_cm.header.stamp.secs, _x.action_goal.goal.r_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.r_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.r_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.r_t.w_cm.transform.translation.x, _x.action_goal.goal.r_t.w_cm.transform.translation.y, _x.action_goal.goal.r_t.w_cm.transform.translation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.x, _x.action_goal.goal.r_t.w_cm.transform.rotation.y, _x.action_goal.goal.r_t.w_cm.transform.rotation.z, _x.action_goal.goal.r_t.w_cm.transform.rotation.w, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_B = struct.Struct("<B")
_struct_2I = struct.Struct("<2I")
_struct_7d3I = struct.Struct("<7d3I")
