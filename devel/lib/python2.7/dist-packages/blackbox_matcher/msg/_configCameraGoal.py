# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from blackbox_matcher/configCameraGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import shared_files.msg
import geometry_msgs.msg
import std_msgs.msg

class configCameraGoal(genpy.Message):
  _md5sum = "d0e0d3e8622fd0fc360c4b6d9496bf26"
  _type = "blackbox_matcher/configCameraGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
shared_files/TransformNames settings_transform
shared_files/TopicNames settings_topic
geometry_msgs/Transform base
shared_files/SettingsTransform n_t
shared_files/SettingsTransform r_t

================================================================================
MSG: shared_files/TransformNames
std_msgs/String ID
std_msgs/String world_frame
std_msgs/String cm
std_msgs/String left
std_msgs/String right
std_msgs/String left_cv
std_msgs/String right_cv

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: shared_files/TopicNames
std_msgs/String RelativeCloudTopic
std_msgs/String MatchesTopic
std_msgs/String NoisyEstimationTopic
std_msgs/String OriginalTopic
std_msgs/String RectifiedEstimationTopic
std_msgs/String MapTopic

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: shared_files/SettingsTransform
geometry_msgs/TransformStamped cm_l
geometry_msgs/TransformStamped l_cv
geometry_msgs/TransformStamped cm_r
geometry_msgs/TransformStamped r_cv
geometry_msgs/TransformStamped w_cm

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://www.ros.org/wiki/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['settings_transform','settings_topic','base','n_t','r_t']
  _slot_types = ['shared_files/TransformNames','shared_files/TopicNames','geometry_msgs/Transform','shared_files/SettingsTransform','shared_files/SettingsTransform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       settings_transform,settings_topic,base,n_t,r_t

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(configCameraGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.settings_transform is None:
        self.settings_transform = shared_files.msg.TransformNames()
      if self.settings_topic is None:
        self.settings_topic = shared_files.msg.TopicNames()
      if self.base is None:
        self.base = geometry_msgs.msg.Transform()
      if self.n_t is None:
        self.n_t = shared_files.msg.SettingsTransform()
      if self.r_t is None:
        self.r_t = shared_files.msg.SettingsTransform()
    else:
      self.settings_transform = shared_files.msg.TransformNames()
      self.settings_topic = shared_files.msg.TopicNames()
      self.base = geometry_msgs.msg.Transform()
      self.n_t = shared_files.msg.SettingsTransform()
      self.r_t = shared_files.msg.SettingsTransform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.settings_transform.ID.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.world_frame.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.left.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.right.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.left_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.right_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.RelativeCloudTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.MatchesTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.NoisyEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.OriginalTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.RectifiedEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.MapTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.base.translation.x, _x.base.translation.y, _x.base.translation.z, _x.base.rotation.x, _x.base.rotation.y, _x.base.rotation.z, _x.base.rotation.w, _x.n_t.cm_l.header.seq, _x.n_t.cm_l.header.stamp.secs, _x.n_t.cm_l.header.stamp.nsecs))
      _x = self.n_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.cm_l.transform.translation.x, _x.n_t.cm_l.transform.translation.y, _x.n_t.cm_l.transform.translation.z, _x.n_t.cm_l.transform.rotation.x, _x.n_t.cm_l.transform.rotation.y, _x.n_t.cm_l.transform.rotation.z, _x.n_t.cm_l.transform.rotation.w, _x.n_t.l_cv.header.seq, _x.n_t.l_cv.header.stamp.secs, _x.n_t.l_cv.header.stamp.nsecs))
      _x = self.n_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.l_cv.transform.translation.x, _x.n_t.l_cv.transform.translation.y, _x.n_t.l_cv.transform.translation.z, _x.n_t.l_cv.transform.rotation.x, _x.n_t.l_cv.transform.rotation.y, _x.n_t.l_cv.transform.rotation.z, _x.n_t.l_cv.transform.rotation.w, _x.n_t.cm_r.header.seq, _x.n_t.cm_r.header.stamp.secs, _x.n_t.cm_r.header.stamp.nsecs))
      _x = self.n_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.cm_r.transform.translation.x, _x.n_t.cm_r.transform.translation.y, _x.n_t.cm_r.transform.translation.z, _x.n_t.cm_r.transform.rotation.x, _x.n_t.cm_r.transform.rotation.y, _x.n_t.cm_r.transform.rotation.z, _x.n_t.cm_r.transform.rotation.w, _x.n_t.r_cv.header.seq, _x.n_t.r_cv.header.stamp.secs, _x.n_t.r_cv.header.stamp.nsecs))
      _x = self.n_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.r_cv.transform.translation.x, _x.n_t.r_cv.transform.translation.y, _x.n_t.r_cv.transform.translation.z, _x.n_t.r_cv.transform.rotation.x, _x.n_t.r_cv.transform.rotation.y, _x.n_t.r_cv.transform.rotation.z, _x.n_t.r_cv.transform.rotation.w, _x.n_t.w_cm.header.seq, _x.n_t.w_cm.header.stamp.secs, _x.n_t.w_cm.header.stamp.nsecs))
      _x = self.n_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.w_cm.transform.translation.x, _x.n_t.w_cm.transform.translation.y, _x.n_t.w_cm.transform.translation.z, _x.n_t.w_cm.transform.rotation.x, _x.n_t.w_cm.transform.rotation.y, _x.n_t.w_cm.transform.rotation.z, _x.n_t.w_cm.transform.rotation.w, _x.r_t.cm_l.header.seq, _x.r_t.cm_l.header.stamp.secs, _x.r_t.cm_l.header.stamp.nsecs))
      _x = self.r_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.cm_l.transform.translation.x, _x.r_t.cm_l.transform.translation.y, _x.r_t.cm_l.transform.translation.z, _x.r_t.cm_l.transform.rotation.x, _x.r_t.cm_l.transform.rotation.y, _x.r_t.cm_l.transform.rotation.z, _x.r_t.cm_l.transform.rotation.w, _x.r_t.l_cv.header.seq, _x.r_t.l_cv.header.stamp.secs, _x.r_t.l_cv.header.stamp.nsecs))
      _x = self.r_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.l_cv.transform.translation.x, _x.r_t.l_cv.transform.translation.y, _x.r_t.l_cv.transform.translation.z, _x.r_t.l_cv.transform.rotation.x, _x.r_t.l_cv.transform.rotation.y, _x.r_t.l_cv.transform.rotation.z, _x.r_t.l_cv.transform.rotation.w, _x.r_t.cm_r.header.seq, _x.r_t.cm_r.header.stamp.secs, _x.r_t.cm_r.header.stamp.nsecs))
      _x = self.r_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.cm_r.transform.translation.x, _x.r_t.cm_r.transform.translation.y, _x.r_t.cm_r.transform.translation.z, _x.r_t.cm_r.transform.rotation.x, _x.r_t.cm_r.transform.rotation.y, _x.r_t.cm_r.transform.rotation.z, _x.r_t.cm_r.transform.rotation.w, _x.r_t.r_cv.header.seq, _x.r_t.r_cv.header.stamp.secs, _x.r_t.r_cv.header.stamp.nsecs))
      _x = self.r_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.r_cv.transform.translation.x, _x.r_t.r_cv.transform.translation.y, _x.r_t.r_cv.transform.translation.z, _x.r_t.r_cv.transform.rotation.x, _x.r_t.r_cv.transform.rotation.y, _x.r_t.r_cv.transform.rotation.z, _x.r_t.r_cv.transform.rotation.w, _x.r_t.w_cm.header.seq, _x.r_t.w_cm.header.stamp.secs, _x.r_t.w_cm.header.stamp.nsecs))
      _x = self.r_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.r_t.w_cm.transform.translation.x, _x.r_t.w_cm.transform.translation.y, _x.r_t.w_cm.transform.translation.z, _x.r_t.w_cm.transform.rotation.x, _x.r_t.w_cm.transform.rotation.y, _x.r_t.w_cm.transform.rotation.z, _x.r_t.w_cm.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.settings_transform is None:
        self.settings_transform = shared_files.msg.TransformNames()
      if self.settings_topic is None:
        self.settings_topic = shared_files.msg.TopicNames()
      if self.base is None:
        self.base = geometry_msgs.msg.Transform()
      if self.n_t is None:
        self.n_t = shared_files.msg.SettingsTransform()
      if self.r_t is None:
        self.r_t = shared_files.msg.SettingsTransform()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.ID.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.ID.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.world_frame.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.world_frame.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.cm.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.left.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.left.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.right.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.left_cv.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.left_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.right_cv.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.right_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.RelativeCloudTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.RelativeCloudTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.MatchesTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.MatchesTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.NoisyEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.NoisyEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.OriginalTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.OriginalTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.RectifiedEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.RectifiedEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.MapTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.MapTopic.data = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.base.translation.x, _x.base.translation.y, _x.base.translation.z, _x.base.rotation.x, _x.base.rotation.y, _x.base.rotation.z, _x.base.rotation.w, _x.n_t.cm_l.header.seq, _x.n_t.cm_l.header.stamp.secs, _x.n_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.cm_l.transform.translation.x, _x.n_t.cm_l.transform.translation.y, _x.n_t.cm_l.transform.translation.z, _x.n_t.cm_l.transform.rotation.x, _x.n_t.cm_l.transform.rotation.y, _x.n_t.cm_l.transform.rotation.z, _x.n_t.cm_l.transform.rotation.w, _x.n_t.l_cv.header.seq, _x.n_t.l_cv.header.stamp.secs, _x.n_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.l_cv.transform.translation.x, _x.n_t.l_cv.transform.translation.y, _x.n_t.l_cv.transform.translation.z, _x.n_t.l_cv.transform.rotation.x, _x.n_t.l_cv.transform.rotation.y, _x.n_t.l_cv.transform.rotation.z, _x.n_t.l_cv.transform.rotation.w, _x.n_t.cm_r.header.seq, _x.n_t.cm_r.header.stamp.secs, _x.n_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.cm_r.transform.translation.x, _x.n_t.cm_r.transform.translation.y, _x.n_t.cm_r.transform.translation.z, _x.n_t.cm_r.transform.rotation.x, _x.n_t.cm_r.transform.rotation.y, _x.n_t.cm_r.transform.rotation.z, _x.n_t.cm_r.transform.rotation.w, _x.n_t.r_cv.header.seq, _x.n_t.r_cv.header.stamp.secs, _x.n_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.r_cv.transform.translation.x, _x.n_t.r_cv.transform.translation.y, _x.n_t.r_cv.transform.translation.z, _x.n_t.r_cv.transform.rotation.x, _x.n_t.r_cv.transform.rotation.y, _x.n_t.r_cv.transform.rotation.z, _x.n_t.r_cv.transform.rotation.w, _x.n_t.w_cm.header.seq, _x.n_t.w_cm.header.stamp.secs, _x.n_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.w_cm.transform.translation.x, _x.n_t.w_cm.transform.translation.y, _x.n_t.w_cm.transform.translation.z, _x.n_t.w_cm.transform.rotation.x, _x.n_t.w_cm.transform.rotation.y, _x.n_t.w_cm.transform.rotation.z, _x.n_t.w_cm.transform.rotation.w, _x.r_t.cm_l.header.seq, _x.r_t.cm_l.header.stamp.secs, _x.r_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.cm_l.transform.translation.x, _x.r_t.cm_l.transform.translation.y, _x.r_t.cm_l.transform.translation.z, _x.r_t.cm_l.transform.rotation.x, _x.r_t.cm_l.transform.rotation.y, _x.r_t.cm_l.transform.rotation.z, _x.r_t.cm_l.transform.rotation.w, _x.r_t.l_cv.header.seq, _x.r_t.l_cv.header.stamp.secs, _x.r_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.l_cv.transform.translation.x, _x.r_t.l_cv.transform.translation.y, _x.r_t.l_cv.transform.translation.z, _x.r_t.l_cv.transform.rotation.x, _x.r_t.l_cv.transform.rotation.y, _x.r_t.l_cv.transform.rotation.z, _x.r_t.l_cv.transform.rotation.w, _x.r_t.cm_r.header.seq, _x.r_t.cm_r.header.stamp.secs, _x.r_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.cm_r.transform.translation.x, _x.r_t.cm_r.transform.translation.y, _x.r_t.cm_r.transform.translation.z, _x.r_t.cm_r.transform.rotation.x, _x.r_t.cm_r.transform.rotation.y, _x.r_t.cm_r.transform.rotation.z, _x.r_t.cm_r.transform.rotation.w, _x.r_t.r_cv.header.seq, _x.r_t.r_cv.header.stamp.secs, _x.r_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.r_cv.transform.translation.x, _x.r_t.r_cv.transform.translation.y, _x.r_t.r_cv.transform.translation.z, _x.r_t.r_cv.transform.rotation.x, _x.r_t.r_cv.transform.rotation.y, _x.r_t.r_cv.transform.rotation.z, _x.r_t.r_cv.transform.rotation.w, _x.r_t.w_cm.header.seq, _x.r_t.w_cm.header.stamp.secs, _x.r_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.r_t.w_cm.transform.translation.x, _x.r_t.w_cm.transform.translation.y, _x.r_t.w_cm.transform.translation.z, _x.r_t.w_cm.transform.rotation.x, _x.r_t.w_cm.transform.rotation.y, _x.r_t.w_cm.transform.rotation.z, _x.r_t.w_cm.transform.rotation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.settings_transform.ID.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.world_frame.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.left.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.right.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.left_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_transform.right_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.RelativeCloudTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.MatchesTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.NoisyEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.OriginalTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.RectifiedEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.settings_topic.MapTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.base.translation.x, _x.base.translation.y, _x.base.translation.z, _x.base.rotation.x, _x.base.rotation.y, _x.base.rotation.z, _x.base.rotation.w, _x.n_t.cm_l.header.seq, _x.n_t.cm_l.header.stamp.secs, _x.n_t.cm_l.header.stamp.nsecs))
      _x = self.n_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.cm_l.transform.translation.x, _x.n_t.cm_l.transform.translation.y, _x.n_t.cm_l.transform.translation.z, _x.n_t.cm_l.transform.rotation.x, _x.n_t.cm_l.transform.rotation.y, _x.n_t.cm_l.transform.rotation.z, _x.n_t.cm_l.transform.rotation.w, _x.n_t.l_cv.header.seq, _x.n_t.l_cv.header.stamp.secs, _x.n_t.l_cv.header.stamp.nsecs))
      _x = self.n_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.l_cv.transform.translation.x, _x.n_t.l_cv.transform.translation.y, _x.n_t.l_cv.transform.translation.z, _x.n_t.l_cv.transform.rotation.x, _x.n_t.l_cv.transform.rotation.y, _x.n_t.l_cv.transform.rotation.z, _x.n_t.l_cv.transform.rotation.w, _x.n_t.cm_r.header.seq, _x.n_t.cm_r.header.stamp.secs, _x.n_t.cm_r.header.stamp.nsecs))
      _x = self.n_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.cm_r.transform.translation.x, _x.n_t.cm_r.transform.translation.y, _x.n_t.cm_r.transform.translation.z, _x.n_t.cm_r.transform.rotation.x, _x.n_t.cm_r.transform.rotation.y, _x.n_t.cm_r.transform.rotation.z, _x.n_t.cm_r.transform.rotation.w, _x.n_t.r_cv.header.seq, _x.n_t.r_cv.header.stamp.secs, _x.n_t.r_cv.header.stamp.nsecs))
      _x = self.n_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.r_cv.transform.translation.x, _x.n_t.r_cv.transform.translation.y, _x.n_t.r_cv.transform.translation.z, _x.n_t.r_cv.transform.rotation.x, _x.n_t.r_cv.transform.rotation.y, _x.n_t.r_cv.transform.rotation.z, _x.n_t.r_cv.transform.rotation.w, _x.n_t.w_cm.header.seq, _x.n_t.w_cm.header.stamp.secs, _x.n_t.w_cm.header.stamp.nsecs))
      _x = self.n_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.n_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.n_t.w_cm.transform.translation.x, _x.n_t.w_cm.transform.translation.y, _x.n_t.w_cm.transform.translation.z, _x.n_t.w_cm.transform.rotation.x, _x.n_t.w_cm.transform.rotation.y, _x.n_t.w_cm.transform.rotation.z, _x.n_t.w_cm.transform.rotation.w, _x.r_t.cm_l.header.seq, _x.r_t.cm_l.header.stamp.secs, _x.r_t.cm_l.header.stamp.nsecs))
      _x = self.r_t.cm_l.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.cm_l.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.cm_l.transform.translation.x, _x.r_t.cm_l.transform.translation.y, _x.r_t.cm_l.transform.translation.z, _x.r_t.cm_l.transform.rotation.x, _x.r_t.cm_l.transform.rotation.y, _x.r_t.cm_l.transform.rotation.z, _x.r_t.cm_l.transform.rotation.w, _x.r_t.l_cv.header.seq, _x.r_t.l_cv.header.stamp.secs, _x.r_t.l_cv.header.stamp.nsecs))
      _x = self.r_t.l_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.l_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.l_cv.transform.translation.x, _x.r_t.l_cv.transform.translation.y, _x.r_t.l_cv.transform.translation.z, _x.r_t.l_cv.transform.rotation.x, _x.r_t.l_cv.transform.rotation.y, _x.r_t.l_cv.transform.rotation.z, _x.r_t.l_cv.transform.rotation.w, _x.r_t.cm_r.header.seq, _x.r_t.cm_r.header.stamp.secs, _x.r_t.cm_r.header.stamp.nsecs))
      _x = self.r_t.cm_r.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.cm_r.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.cm_r.transform.translation.x, _x.r_t.cm_r.transform.translation.y, _x.r_t.cm_r.transform.translation.z, _x.r_t.cm_r.transform.rotation.x, _x.r_t.cm_r.transform.rotation.y, _x.r_t.cm_r.transform.rotation.z, _x.r_t.cm_r.transform.rotation.w, _x.r_t.r_cv.header.seq, _x.r_t.r_cv.header.stamp.secs, _x.r_t.r_cv.header.stamp.nsecs))
      _x = self.r_t.r_cv.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.r_cv.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.r_t.r_cv.transform.translation.x, _x.r_t.r_cv.transform.translation.y, _x.r_t.r_cv.transform.translation.z, _x.r_t.r_cv.transform.rotation.x, _x.r_t.r_cv.transform.rotation.y, _x.r_t.r_cv.transform.rotation.z, _x.r_t.r_cv.transform.rotation.w, _x.r_t.w_cm.header.seq, _x.r_t.w_cm.header.stamp.secs, _x.r_t.w_cm.header.stamp.nsecs))
      _x = self.r_t.w_cm.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r_t.w_cm.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.r_t.w_cm.transform.translation.x, _x.r_t.w_cm.transform.translation.y, _x.r_t.w_cm.transform.translation.z, _x.r_t.w_cm.transform.rotation.x, _x.r_t.w_cm.transform.rotation.y, _x.r_t.w_cm.transform.rotation.z, _x.r_t.w_cm.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.settings_transform is None:
        self.settings_transform = shared_files.msg.TransformNames()
      if self.settings_topic is None:
        self.settings_topic = shared_files.msg.TopicNames()
      if self.base is None:
        self.base = geometry_msgs.msg.Transform()
      if self.n_t is None:
        self.n_t = shared_files.msg.SettingsTransform()
      if self.r_t is None:
        self.r_t = shared_files.msg.SettingsTransform()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.ID.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.ID.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.world_frame.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.world_frame.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.cm.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.left.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.left.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.right.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.left_cv.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.left_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_transform.right_cv.data = str[start:end].decode('utf-8')
      else:
        self.settings_transform.right_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.RelativeCloudTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.RelativeCloudTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.MatchesTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.MatchesTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.NoisyEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.NoisyEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.OriginalTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.OriginalTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.RectifiedEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.RectifiedEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.settings_topic.MapTopic.data = str[start:end].decode('utf-8')
      else:
        self.settings_topic.MapTopic.data = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.base.translation.x, _x.base.translation.y, _x.base.translation.z, _x.base.rotation.x, _x.base.rotation.y, _x.base.rotation.z, _x.base.rotation.w, _x.n_t.cm_l.header.seq, _x.n_t.cm_l.header.stamp.secs, _x.n_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.cm_l.transform.translation.x, _x.n_t.cm_l.transform.translation.y, _x.n_t.cm_l.transform.translation.z, _x.n_t.cm_l.transform.rotation.x, _x.n_t.cm_l.transform.rotation.y, _x.n_t.cm_l.transform.rotation.z, _x.n_t.cm_l.transform.rotation.w, _x.n_t.l_cv.header.seq, _x.n_t.l_cv.header.stamp.secs, _x.n_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.l_cv.transform.translation.x, _x.n_t.l_cv.transform.translation.y, _x.n_t.l_cv.transform.translation.z, _x.n_t.l_cv.transform.rotation.x, _x.n_t.l_cv.transform.rotation.y, _x.n_t.l_cv.transform.rotation.z, _x.n_t.l_cv.transform.rotation.w, _x.n_t.cm_r.header.seq, _x.n_t.cm_r.header.stamp.secs, _x.n_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.cm_r.transform.translation.x, _x.n_t.cm_r.transform.translation.y, _x.n_t.cm_r.transform.translation.z, _x.n_t.cm_r.transform.rotation.x, _x.n_t.cm_r.transform.rotation.y, _x.n_t.cm_r.transform.rotation.z, _x.n_t.cm_r.transform.rotation.w, _x.n_t.r_cv.header.seq, _x.n_t.r_cv.header.stamp.secs, _x.n_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.r_cv.transform.translation.x, _x.n_t.r_cv.transform.translation.y, _x.n_t.r_cv.transform.translation.z, _x.n_t.r_cv.transform.rotation.x, _x.n_t.r_cv.transform.rotation.y, _x.n_t.r_cv.transform.rotation.z, _x.n_t.r_cv.transform.rotation.w, _x.n_t.w_cm.header.seq, _x.n_t.w_cm.header.stamp.secs, _x.n_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.n_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.n_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.n_t.w_cm.transform.translation.x, _x.n_t.w_cm.transform.translation.y, _x.n_t.w_cm.transform.translation.z, _x.n_t.w_cm.transform.rotation.x, _x.n_t.w_cm.transform.rotation.y, _x.n_t.w_cm.transform.rotation.z, _x.n_t.w_cm.transform.rotation.w, _x.r_t.cm_l.header.seq, _x.r_t.cm_l.header.stamp.secs, _x.r_t.cm_l.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_l.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_l.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_l.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_l.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.cm_l.transform.translation.x, _x.r_t.cm_l.transform.translation.y, _x.r_t.cm_l.transform.translation.z, _x.r_t.cm_l.transform.rotation.x, _x.r_t.cm_l.transform.rotation.y, _x.r_t.cm_l.transform.rotation.z, _x.r_t.cm_l.transform.rotation.w, _x.r_t.l_cv.header.seq, _x.r_t.l_cv.header.stamp.secs, _x.r_t.l_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.l_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.l_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.l_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.l_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.l_cv.transform.translation.x, _x.r_t.l_cv.transform.translation.y, _x.r_t.l_cv.transform.translation.z, _x.r_t.l_cv.transform.rotation.x, _x.r_t.l_cv.transform.rotation.y, _x.r_t.l_cv.transform.rotation.z, _x.r_t.l_cv.transform.rotation.w, _x.r_t.cm_r.header.seq, _x.r_t.cm_r.header.stamp.secs, _x.r_t.cm_r.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_r.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_r.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.cm_r.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.cm_r.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.cm_r.transform.translation.x, _x.r_t.cm_r.transform.translation.y, _x.r_t.cm_r.transform.translation.z, _x.r_t.cm_r.transform.rotation.x, _x.r_t.cm_r.transform.rotation.y, _x.r_t.cm_r.transform.rotation.z, _x.r_t.cm_r.transform.rotation.w, _x.r_t.r_cv.header.seq, _x.r_t.r_cv.header.stamp.secs, _x.r_t.r_cv.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.r_cv.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.r_cv.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.r_cv.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.r_cv.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.r_t.r_cv.transform.translation.x, _x.r_t.r_cv.transform.translation.y, _x.r_t.r_cv.transform.translation.z, _x.r_t.r_cv.transform.rotation.x, _x.r_t.r_cv.transform.rotation.y, _x.r_t.r_cv.transform.rotation.z, _x.r_t.r_cv.transform.rotation.w, _x.r_t.w_cm.header.seq, _x.r_t.w_cm.header.stamp.secs, _x.r_t.w_cm.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.w_cm.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.w_cm.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r_t.w_cm.child_frame_id = str[start:end].decode('utf-8')
      else:
        self.r_t.w_cm.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.r_t.w_cm.transform.translation.x, _x.r_t.w_cm.transform.translation.y, _x.r_t.w_cm.transform.translation.z, _x.r_t.w_cm.transform.rotation.x, _x.r_t.w_cm.transform.rotation.y, _x.r_t.w_cm.transform.rotation.z, _x.r_t.w_cm.transform.rotation.w,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
_struct_7d3I = struct.Struct("<7d3I")
