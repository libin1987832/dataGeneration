# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulator/genDataGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class genDataGoal(genpy.Message):
  _md5sum = "6834f4b1422f960c74621775242b1f5c"
  _type = "simulator/genDataGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
std_msgs/String world_name
std_msgs/String unique_id
std_msgs/String path_name
std_msgs/Bool new_prefixes
std_msgs/String cm
std_msgs/String l
std_msgs/String r
std_msgs/String lcv
std_msgs/String rcv
std_msgs/Bool load_world
std_msgs/String world_dir
std_msgs/Bool load_path
std_msgs/String path_dir

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['world_name','unique_id','path_name','new_prefixes','cm','l','r','lcv','rcv','load_world','world_dir','load_path','path_dir']
  _slot_types = ['std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/Bool','std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/String','std_msgs/Bool','std_msgs/String','std_msgs/Bool','std_msgs/String']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       world_name,unique_id,path_name,new_prefixes,cm,l,r,lcv,rcv,load_world,world_dir,load_path,path_dir

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(genDataGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.world_name is None:
        self.world_name = std_msgs.msg.String()
      if self.unique_id is None:
        self.unique_id = std_msgs.msg.String()
      if self.path_name is None:
        self.path_name = std_msgs.msg.String()
      if self.new_prefixes is None:
        self.new_prefixes = std_msgs.msg.Bool()
      if self.cm is None:
        self.cm = std_msgs.msg.String()
      if self.l is None:
        self.l = std_msgs.msg.String()
      if self.r is None:
        self.r = std_msgs.msg.String()
      if self.lcv is None:
        self.lcv = std_msgs.msg.String()
      if self.rcv is None:
        self.rcv = std_msgs.msg.String()
      if self.load_world is None:
        self.load_world = std_msgs.msg.Bool()
      if self.world_dir is None:
        self.world_dir = std_msgs.msg.String()
      if self.load_path is None:
        self.load_path = std_msgs.msg.Bool()
      if self.path_dir is None:
        self.path_dir = std_msgs.msg.String()
    else:
      self.world_name = std_msgs.msg.String()
      self.unique_id = std_msgs.msg.String()
      self.path_name = std_msgs.msg.String()
      self.new_prefixes = std_msgs.msg.Bool()
      self.cm = std_msgs.msg.String()
      self.l = std_msgs.msg.String()
      self.r = std_msgs.msg.String()
      self.lcv = std_msgs.msg.String()
      self.rcv = std_msgs.msg.String()
      self.load_world = std_msgs.msg.Bool()
      self.world_dir = std_msgs.msg.String()
      self.load_path = std_msgs.msg.Bool()
      self.path_dir = std_msgs.msg.String()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.world_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.path_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.new_prefixes.data))
      _x = self.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.l.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.lcv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rcv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.load_world.data))
      _x = self.world_dir.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.load_path.data))
      _x = self.path_dir.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.world_name is None:
        self.world_name = std_msgs.msg.String()
      if self.unique_id is None:
        self.unique_id = std_msgs.msg.String()
      if self.path_name is None:
        self.path_name = std_msgs.msg.String()
      if self.new_prefixes is None:
        self.new_prefixes = std_msgs.msg.Bool()
      if self.cm is None:
        self.cm = std_msgs.msg.String()
      if self.l is None:
        self.l = std_msgs.msg.String()
      if self.r is None:
        self.r = std_msgs.msg.String()
      if self.lcv is None:
        self.lcv = std_msgs.msg.String()
      if self.rcv is None:
        self.rcv = std_msgs.msg.String()
      if self.load_world is None:
        self.load_world = std_msgs.msg.Bool()
      if self.world_dir is None:
        self.world_dir = std_msgs.msg.String()
      if self.load_path is None:
        self.load_path = std_msgs.msg.Bool()
      if self.path_dir is None:
        self.path_dir = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.world_name.data = str[start:end].decode('utf-8')
      else:
        self.world_name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_id.data = str[start:end].decode('utf-8')
      else:
        self.unique_id.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_name.data = str[start:end].decode('utf-8')
      else:
        self.path_name.data = str[start:end]
      start = end
      end += 1
      (self.new_prefixes.data,) = _struct_B.unpack(str[start:end])
      self.new_prefixes.data = bool(self.new_prefixes.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cm.data = str[start:end].decode('utf-8')
      else:
        self.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.l.data = str[start:end].decode('utf-8')
      else:
        self.l.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r.data = str[start:end].decode('utf-8')
      else:
        self.r.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lcv.data = str[start:end].decode('utf-8')
      else:
        self.lcv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rcv.data = str[start:end].decode('utf-8')
      else:
        self.rcv.data = str[start:end]
      start = end
      end += 1
      (self.load_world.data,) = _struct_B.unpack(str[start:end])
      self.load_world.data = bool(self.load_world.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.world_dir.data = str[start:end].decode('utf-8')
      else:
        self.world_dir.data = str[start:end]
      start = end
      end += 1
      (self.load_path.data,) = _struct_B.unpack(str[start:end])
      self.load_path.data = bool(self.load_path.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_dir.data = str[start:end].decode('utf-8')
      else:
        self.path_dir.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.world_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.unique_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.path_name.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.new_prefixes.data))
      _x = self.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.l.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.r.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.lcv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rcv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.load_world.data))
      _x = self.world_dir.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.load_path.data))
      _x = self.path_dir.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.world_name is None:
        self.world_name = std_msgs.msg.String()
      if self.unique_id is None:
        self.unique_id = std_msgs.msg.String()
      if self.path_name is None:
        self.path_name = std_msgs.msg.String()
      if self.new_prefixes is None:
        self.new_prefixes = std_msgs.msg.Bool()
      if self.cm is None:
        self.cm = std_msgs.msg.String()
      if self.l is None:
        self.l = std_msgs.msg.String()
      if self.r is None:
        self.r = std_msgs.msg.String()
      if self.lcv is None:
        self.lcv = std_msgs.msg.String()
      if self.rcv is None:
        self.rcv = std_msgs.msg.String()
      if self.load_world is None:
        self.load_world = std_msgs.msg.Bool()
      if self.world_dir is None:
        self.world_dir = std_msgs.msg.String()
      if self.load_path is None:
        self.load_path = std_msgs.msg.Bool()
      if self.path_dir is None:
        self.path_dir = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.world_name.data = str[start:end].decode('utf-8')
      else:
        self.world_name.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.unique_id.data = str[start:end].decode('utf-8')
      else:
        self.unique_id.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_name.data = str[start:end].decode('utf-8')
      else:
        self.path_name.data = str[start:end]
      start = end
      end += 1
      (self.new_prefixes.data,) = _struct_B.unpack(str[start:end])
      self.new_prefixes.data = bool(self.new_prefixes.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.cm.data = str[start:end].decode('utf-8')
      else:
        self.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.l.data = str[start:end].decode('utf-8')
      else:
        self.l.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.r.data = str[start:end].decode('utf-8')
      else:
        self.r.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lcv.data = str[start:end].decode('utf-8')
      else:
        self.lcv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rcv.data = str[start:end].decode('utf-8')
      else:
        self.rcv.data = str[start:end]
      start = end
      end += 1
      (self.load_world.data,) = _struct_B.unpack(str[start:end])
      self.load_world.data = bool(self.load_world.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.world_dir.data = str[start:end].decode('utf-8')
      else:
        self.world_dir.data = str[start:end]
      start = end
      end += 1
      (self.load_path.data,) = _struct_B.unpack(str[start:end])
      self.load_path.data = bool(self.load_path.data)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_dir.data = str[start:end].decode('utf-8')
      else:
        self.path_dir.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
