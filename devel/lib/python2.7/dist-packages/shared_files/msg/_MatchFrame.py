# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from shared_files/MatchFrame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import shared_files.msg
import std_msgs.msg

class MatchFrame(genpy.Message):
  _md5sum = "a8eda00529b8ce2ece82093576c44798"
  _type = "shared_files/MatchFrame"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """shared_files/MatchingPoints[] Frame
std_msgs/Int32 frame_id

================================================================================
MSG: shared_files/MatchingPoints
shared_files/PixelMatch Rectified
shared_files/PixelMatch Noise
std_msgs/Int32 NumberID

================================================================================
MSG: shared_files/PixelMatch
std_msgs/Float32 u
std_msgs/Float32 v
std_msgs/Float32 Disparity

================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['Frame','frame_id']
  _slot_types = ['shared_files/MatchingPoints[]','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Frame,frame_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MatchFrame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Frame is None:
        self.Frame = []
      if self.frame_id is None:
        self.frame_id = std_msgs.msg.Int32()
    else:
      self.Frame = []
      self.frame_id = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Frame)
      buff.write(_struct_I.pack(length))
      for val1 in self.Frame:
        _v1 = val1.Rectified
        _v2 = _v1.u
        buff.write(_struct_f.pack(_v2.data))
        _v3 = _v1.v
        buff.write(_struct_f.pack(_v3.data))
        _v4 = _v1.Disparity
        buff.write(_struct_f.pack(_v4.data))
        _v5 = val1.Noise
        _v6 = _v5.u
        buff.write(_struct_f.pack(_v6.data))
        _v7 = _v5.v
        buff.write(_struct_f.pack(_v7.data))
        _v8 = _v5.Disparity
        buff.write(_struct_f.pack(_v8.data))
        _v9 = val1.NumberID
        buff.write(_struct_i.pack(_v9.data))
      buff.write(_struct_i.pack(self.frame_id.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Frame is None:
        self.Frame = None
      if self.frame_id is None:
        self.frame_id = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Frame = []
      for i in range(0, length):
        val1 = shared_files.msg.MatchingPoints()
        _v10 = val1.Rectified
        _v11 = _v10.u
        start = end
        end += 4
        (_v11.data,) = _struct_f.unpack(str[start:end])
        _v12 = _v10.v
        start = end
        end += 4
        (_v12.data,) = _struct_f.unpack(str[start:end])
        _v13 = _v10.Disparity
        start = end
        end += 4
        (_v13.data,) = _struct_f.unpack(str[start:end])
        _v14 = val1.Noise
        _v15 = _v14.u
        start = end
        end += 4
        (_v15.data,) = _struct_f.unpack(str[start:end])
        _v16 = _v14.v
        start = end
        end += 4
        (_v16.data,) = _struct_f.unpack(str[start:end])
        _v17 = _v14.Disparity
        start = end
        end += 4
        (_v17.data,) = _struct_f.unpack(str[start:end])
        _v18 = val1.NumberID
        start = end
        end += 4
        (_v18.data,) = _struct_i.unpack(str[start:end])
        self.Frame.append(val1)
      start = end
      end += 4
      (self.frame_id.data,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Frame)
      buff.write(_struct_I.pack(length))
      for val1 in self.Frame:
        _v19 = val1.Rectified
        _v20 = _v19.u
        buff.write(_struct_f.pack(_v20.data))
        _v21 = _v19.v
        buff.write(_struct_f.pack(_v21.data))
        _v22 = _v19.Disparity
        buff.write(_struct_f.pack(_v22.data))
        _v23 = val1.Noise
        _v24 = _v23.u
        buff.write(_struct_f.pack(_v24.data))
        _v25 = _v23.v
        buff.write(_struct_f.pack(_v25.data))
        _v26 = _v23.Disparity
        buff.write(_struct_f.pack(_v26.data))
        _v27 = val1.NumberID
        buff.write(_struct_i.pack(_v27.data))
      buff.write(_struct_i.pack(self.frame_id.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Frame is None:
        self.Frame = None
      if self.frame_id is None:
        self.frame_id = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Frame = []
      for i in range(0, length):
        val1 = shared_files.msg.MatchingPoints()
        _v28 = val1.Rectified
        _v29 = _v28.u
        start = end
        end += 4
        (_v29.data,) = _struct_f.unpack(str[start:end])
        _v30 = _v28.v
        start = end
        end += 4
        (_v30.data,) = _struct_f.unpack(str[start:end])
        _v31 = _v28.Disparity
        start = end
        end += 4
        (_v31.data,) = _struct_f.unpack(str[start:end])
        _v32 = val1.Noise
        _v33 = _v32.u
        start = end
        end += 4
        (_v33.data,) = _struct_f.unpack(str[start:end])
        _v34 = _v32.v
        start = end
        end += 4
        (_v34.data,) = _struct_f.unpack(str[start:end])
        _v35 = _v32.Disparity
        start = end
        end += 4
        (_v35.data,) = _struct_f.unpack(str[start:end])
        _v36 = val1.NumberID
        start = end
        end += 4
        (_v36.data,) = _struct_i.unpack(str[start:end])
        self.Frame.append(val1)
      start = end
      end += 4
      (self.frame_id.data,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_f = struct.Struct("<f")
