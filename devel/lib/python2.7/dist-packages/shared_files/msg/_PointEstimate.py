# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from shared_files/PointEstimate.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PointEstimate(genpy.Message):
  _md5sum = "aba53fa7b710b8c049b6e89d615c2cb0"
  _type = "shared_files/PointEstimate"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point32 Estimate
std_msgs/Float32[] CovRowOne
std_msgs/Float32[] CovRowTwo
std_msgs/Float32[] CovRowThree

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['Estimate','CovRowOne','CovRowTwo','CovRowThree']
  _slot_types = ['geometry_msgs/Point32','std_msgs/Float32[]','std_msgs/Float32[]','std_msgs/Float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Estimate,CovRowOne,CovRowTwo,CovRowThree

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PointEstimate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Estimate is None:
        self.Estimate = geometry_msgs.msg.Point32()
      if self.CovRowOne is None:
        self.CovRowOne = []
      if self.CovRowTwo is None:
        self.CovRowTwo = []
      if self.CovRowThree is None:
        self.CovRowThree = []
    else:
      self.Estimate = geometry_msgs.msg.Point32()
      self.CovRowOne = []
      self.CovRowTwo = []
      self.CovRowThree = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.Estimate.x, _x.Estimate.y, _x.Estimate.z))
      length = len(self.CovRowOne)
      buff.write(_struct_I.pack(length))
      for val1 in self.CovRowOne:
        buff.write(_struct_f.pack(val1.data))
      length = len(self.CovRowTwo)
      buff.write(_struct_I.pack(length))
      for val1 in self.CovRowTwo:
        buff.write(_struct_f.pack(val1.data))
      length = len(self.CovRowThree)
      buff.write(_struct_I.pack(length))
      for val1 in self.CovRowThree:
        buff.write(_struct_f.pack(val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Estimate is None:
        self.Estimate = geometry_msgs.msg.Point32()
      if self.CovRowOne is None:
        self.CovRowOne = None
      if self.CovRowTwo is None:
        self.CovRowTwo = None
      if self.CovRowThree is None:
        self.CovRowThree = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Estimate.x, _x.Estimate.y, _x.Estimate.z,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CovRowOne = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _struct_f.unpack(str[start:end])
        self.CovRowOne.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CovRowTwo = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _struct_f.unpack(str[start:end])
        self.CovRowTwo.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CovRowThree = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _struct_f.unpack(str[start:end])
        self.CovRowThree.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.Estimate.x, _x.Estimate.y, _x.Estimate.z))
      length = len(self.CovRowOne)
      buff.write(_struct_I.pack(length))
      for val1 in self.CovRowOne:
        buff.write(_struct_f.pack(val1.data))
      length = len(self.CovRowTwo)
      buff.write(_struct_I.pack(length))
      for val1 in self.CovRowTwo:
        buff.write(_struct_f.pack(val1.data))
      length = len(self.CovRowThree)
      buff.write(_struct_I.pack(length))
      for val1 in self.CovRowThree:
        buff.write(_struct_f.pack(val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Estimate is None:
        self.Estimate = geometry_msgs.msg.Point32()
      if self.CovRowOne is None:
        self.CovRowOne = None
      if self.CovRowTwo is None:
        self.CovRowTwo = None
      if self.CovRowThree is None:
        self.CovRowThree = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Estimate.x, _x.Estimate.y, _x.Estimate.z,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CovRowOne = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _struct_f.unpack(str[start:end])
        self.CovRowOne.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CovRowTwo = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _struct_f.unpack(str[start:end])
        self.CovRowTwo.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.CovRowThree = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float32()
        start = end
        end += 4
        (val1.data,) = _struct_f.unpack(str[start:end])
        self.CovRowThree.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
_struct_f = struct.Struct("<f")
