# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from shared_files/RelativeFrame.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import shared_files.msg
import geometry_msgs.msg
import std_msgs.msg

class RelativeFrame(genpy.Message):
  _md5sum = "aed8a9c8614008d5571c40635b45b623"
  _type = "shared_files/RelativeFrame"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """shared_files/RelativePoint[] PointCloudRelative
std_msgs/Int32 FrameNumber

================================================================================
MSG: shared_files/RelativePoint
geometry_msgs/Point coord
std_msgs/Int32 identification

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['PointCloudRelative','FrameNumber']
  _slot_types = ['shared_files/RelativePoint[]','std_msgs/Int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PointCloudRelative,FrameNumber

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelativeFrame, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PointCloudRelative is None:
        self.PointCloudRelative = []
      if self.FrameNumber is None:
        self.FrameNumber = std_msgs.msg.Int32()
    else:
      self.PointCloudRelative = []
      self.FrameNumber = std_msgs.msg.Int32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.PointCloudRelative)
      buff.write(_struct_I.pack(length))
      for val1 in self.PointCloudRelative:
        _v1 = val1.coord
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.identification
        buff.write(_struct_i.pack(_v2.data))
      buff.write(_struct_i.pack(self.FrameNumber.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.PointCloudRelative is None:
        self.PointCloudRelative = None
      if self.FrameNumber is None:
        self.FrameNumber = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PointCloudRelative = []
      for i in range(0, length):
        val1 = shared_files.msg.RelativePoint()
        _v3 = val1.coord
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.identification
        start = end
        end += 4
        (_v4.data,) = _struct_i.unpack(str[start:end])
        self.PointCloudRelative.append(val1)
      start = end
      end += 4
      (self.FrameNumber.data,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.PointCloudRelative)
      buff.write(_struct_I.pack(length))
      for val1 in self.PointCloudRelative:
        _v5 = val1.coord
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.identification
        buff.write(_struct_i.pack(_v6.data))
      buff.write(_struct_i.pack(self.FrameNumber.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.PointCloudRelative is None:
        self.PointCloudRelative = None
      if self.FrameNumber is None:
        self.FrameNumber = std_msgs.msg.Int32()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.PointCloudRelative = []
      for i in range(0, length):
        val1 = shared_files.msg.RelativePoint()
        _v7 = val1.coord
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.identification
        start = end
        end += 4
        (_v8.data,) = _struct_i.unpack(str[start:end])
        self.PointCloudRelative.append(val1)
      start = end
      end += 4
      (self.FrameNumber.data,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_3d = struct.Struct("<3d")
