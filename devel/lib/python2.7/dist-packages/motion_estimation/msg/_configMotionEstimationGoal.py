# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motion_estimation/configMotionEstimationGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import shared_files.msg
import std_msgs.msg

class configMotionEstimationGoal(genpy.Message):
  _md5sum = "270b859cd6d37c115cfebe8b49e68ab0"
  _type = "motion_estimation/configMotionEstimationGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
std_msgs/Float64[] QRow_one
std_msgs/Float64[] QRow_two
std_msgs/Float64[] QRow_three
std_msgs/Float64[] QRow_four
shared_files/TransformNames tname
shared_files/TopicNames topname

================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: shared_files/TransformNames
std_msgs/String ID
std_msgs/String world_frame
std_msgs/String cm
std_msgs/String left
std_msgs/String right
std_msgs/String left_cv
std_msgs/String right_cv

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: shared_files/TopicNames
std_msgs/String RelativeCloudTopic
std_msgs/String MatchesTopic
std_msgs/String NoisyEstimationTopic
std_msgs/String OriginalTopic
std_msgs/String RectifiedEstimationTopic
std_msgs/String MapTopic
"""
  __slots__ = ['QRow_one','QRow_two','QRow_three','QRow_four','tname','topname']
  _slot_types = ['std_msgs/Float64[]','std_msgs/Float64[]','std_msgs/Float64[]','std_msgs/Float64[]','shared_files/TransformNames','shared_files/TopicNames']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       QRow_one,QRow_two,QRow_three,QRow_four,tname,topname

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(configMotionEstimationGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.QRow_one is None:
        self.QRow_one = []
      if self.QRow_two is None:
        self.QRow_two = []
      if self.QRow_three is None:
        self.QRow_three = []
      if self.QRow_four is None:
        self.QRow_four = []
      if self.tname is None:
        self.tname = shared_files.msg.TransformNames()
      if self.topname is None:
        self.topname = shared_files.msg.TopicNames()
    else:
      self.QRow_one = []
      self.QRow_two = []
      self.QRow_three = []
      self.QRow_four = []
      self.tname = shared_files.msg.TransformNames()
      self.topname = shared_files.msg.TopicNames()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.QRow_one)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_one:
        buff.write(_struct_d.pack(val1.data))
      length = len(self.QRow_two)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_two:
        buff.write(_struct_d.pack(val1.data))
      length = len(self.QRow_three)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_three:
        buff.write(_struct_d.pack(val1.data))
      length = len(self.QRow_four)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_four:
        buff.write(_struct_d.pack(val1.data))
      _x = self.tname.ID.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.world_frame.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.left.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.right.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.left_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.right_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.RelativeCloudTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.MatchesTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.NoisyEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.OriginalTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.RectifiedEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.MapTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.QRow_one is None:
        self.QRow_one = None
      if self.QRow_two is None:
        self.QRow_two = None
      if self.QRow_three is None:
        self.QRow_three = None
      if self.QRow_four is None:
        self.QRow_four = None
      if self.tname is None:
        self.tname = shared_files.msg.TransformNames()
      if self.topname is None:
        self.topname = shared_files.msg.TopicNames()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_one = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_one.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_two = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_two.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_three = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_three.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_four = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_four.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.ID.data = str[start:end].decode('utf-8')
      else:
        self.tname.ID.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.world_frame.data = str[start:end].decode('utf-8')
      else:
        self.tname.world_frame.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.cm.data = str[start:end].decode('utf-8')
      else:
        self.tname.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.left.data = str[start:end].decode('utf-8')
      else:
        self.tname.left.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.right.data = str[start:end].decode('utf-8')
      else:
        self.tname.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.left_cv.data = str[start:end].decode('utf-8')
      else:
        self.tname.left_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.right_cv.data = str[start:end].decode('utf-8')
      else:
        self.tname.right_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.RelativeCloudTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.RelativeCloudTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.MatchesTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.MatchesTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.NoisyEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.NoisyEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.OriginalTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.OriginalTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.RectifiedEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.RectifiedEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.MapTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.MapTopic.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.QRow_one)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_one:
        buff.write(_struct_d.pack(val1.data))
      length = len(self.QRow_two)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_two:
        buff.write(_struct_d.pack(val1.data))
      length = len(self.QRow_three)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_three:
        buff.write(_struct_d.pack(val1.data))
      length = len(self.QRow_four)
      buff.write(_struct_I.pack(length))
      for val1 in self.QRow_four:
        buff.write(_struct_d.pack(val1.data))
      _x = self.tname.ID.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.world_frame.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.cm.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.left.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.right.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.left_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.tname.right_cv.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.RelativeCloudTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.MatchesTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.NoisyEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.OriginalTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.RectifiedEstimationTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.topname.MapTopic.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.QRow_one is None:
        self.QRow_one = None
      if self.QRow_two is None:
        self.QRow_two = None
      if self.QRow_three is None:
        self.QRow_three = None
      if self.QRow_four is None:
        self.QRow_four = None
      if self.tname is None:
        self.tname = shared_files.msg.TransformNames()
      if self.topname is None:
        self.topname = shared_files.msg.TopicNames()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_one = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_one.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_two = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_two.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_three = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_three.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.QRow_four = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64()
        start = end
        end += 8
        (val1.data,) = _struct_d.unpack(str[start:end])
        self.QRow_four.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.ID.data = str[start:end].decode('utf-8')
      else:
        self.tname.ID.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.world_frame.data = str[start:end].decode('utf-8')
      else:
        self.tname.world_frame.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.cm.data = str[start:end].decode('utf-8')
      else:
        self.tname.cm.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.left.data = str[start:end].decode('utf-8')
      else:
        self.tname.left.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.right.data = str[start:end].decode('utf-8')
      else:
        self.tname.right.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.left_cv.data = str[start:end].decode('utf-8')
      else:
        self.tname.left_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tname.right_cv.data = str[start:end].decode('utf-8')
      else:
        self.tname.right_cv.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.RelativeCloudTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.RelativeCloudTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.MatchesTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.MatchesTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.NoisyEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.NoisyEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.OriginalTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.OriginalTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.RectifiedEstimationTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.RectifiedEstimationTopic.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.topname.MapTopic.data = str[start:end].decode('utf-8')
      else:
        self.topname.MapTopic.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
